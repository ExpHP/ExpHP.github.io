initSidebarItems({"derive":[["AutoSerialize",""],["Deserialize",""],["Serialize",""]],"enum":[["DType","Representation of a Numpy type"],["Order","Order of axes in a file."]],"fn":[["to_file","Serialize an iterator over a struct to a NPY file."],["to_file_1d","Serialize an iterator over a struct to a NPY file."]],"mod":[["write_options","Types and traits related to the implementation of [`WriteOptions`]."]],"struct":[["DTypeError","Indicates that a particular rust type does not support serialization or deserialization as a given [`DType`]."],["Field","A field of a record dtype"],["NpyData","Legacy type for reading `npy` files."],["NpyReader","Object for reading an `npy` file."],["NpyWriter","Interface for writing an NPY file to a data stream."],["ParseTypeStrError","Error type returned by `<TypeStr as FromStr>::parse`."],["TypeStr","Represents an Array Interface type-string."],["WriteOptions","Represents an almost-empty configuration for an [`NpyWriter`]."]],"trait":[["AutoSerialize","Subtrait of [`Serialize`] for types which have a reasonable default [`DType`]."],["Deserialize","Trait that permits reading a type from an `.npy` file."],["Serialize","Trait that permits writing a type to an `.npy` file."],["TypeRead","Like some sort of `for<R: io::Read> Fn(R) -> io::Result<T>`."],["TypeReadDyn","The proper trait to use for trait objects of [`TypeRead`]."],["TypeWrite","Like some sort of `for<W: io::Write> Fn(W, &T) -> io::Result<()>`."],["TypeWriteDyn","The proper trait to use for trait objects of [`TypeWrite`]."],["WriterBuilder","Trait that provides methods on [`WriteOptions`]."]],"type":[["OutFile","[`NpyWriter`] that writes an entire file."]]});