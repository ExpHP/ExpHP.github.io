var searchIndex = JSON.parse('{\
"rsp2":{"doc":"","t":[0,5],"n":["version","get"],"q":["rsp2","rsp2::version"],"d":["",""],"i":[0,0],"f":[null,[[],["versioninfo",3]]],"p":[]},\
"rsp2_array_types":{"doc":"","t":[12,12,12,12,12,12,16,8,6,6,3,6,3,6,3,6,16,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,6,8,6,16,6,8,8,8,8,8,8,16,16,16,8,6,10,10,10,5,10,10,10,10,5,10,10,8,8,8,16,6,5,10,11,10],"n":["0","0","0","0","0","0","En","Envee","Iter","IterMut","M2","M22","M3","M33","M4","M44","Un","Unvee","V2","V3","V4","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle_to","angle_to","angle_to","as_array","as_array","as_array","as_array","as_array","as_array","as_array","as_array","as_array","as_array","as_array","as_array","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","axis_unit","axis_unit","axis_unit","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cross","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","det","det","det","det","det","det","det","det","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot","dot","dot","envee","envee","envee_mut","envee_mut","envee_ref","envee_ref","eq","eq","eq","eq","eq","eq","eye","eye","eye","eye","eye","eye","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_diag","from_diag","from_diag","from_diag","from_diag","from_diag","from_diag","from_diag","from_diag","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into_array","into_array","into_array","into_array","into_array","into_array","into_array","into_array","into_array","into_array","into_array","into_array","inv","inv","inv","inv","inv","inv","inv","inv","is_one","is_one","is_one","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","map","map","map","map","map","map","map","map","map","map","map","map","mat","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_diag","mul_diag","mul_diag","ne","ne","ne","ne","ne","ne","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","norm","norm","norm","one","one","one","opt_map","opt_map","opt_map","opt_map","opt_map","opt_map","opt_map","opt_map","opt_map","opt_map","opt_map","opt_map","par","par","par","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","perp","perp","perp","random_unit","random_unit","random_unit","random_unit_with","random_unit_with","random_unit_with","random_unit_with","random_unit_with","serialize","serialize","serialize","serialize","serialize","serialize","sqnorm","sqnorm","sqnorm","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","t","t","t","t","t","t","t","t","t","t","t","t","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from_fn","try_from_fn","try_from_fn","try_into","try_into","try_into","try_into","try_into","try_into","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unvee","unvee","unvee_mut","unvee_mut","unvee_ref","unvee_ref","vee","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","Array","ArrayT","Det","DetT","Diag","DiagT","FromDiag","FromFn","IntoArray","IntoMatrix","Inv","IsMatrix","Matrix","Output","Output","Transpose","TransposeT","as_array","as_array_mut","det","from_array","from_diag","from_fn","into_array","into_matrix","inv","inv","t","Dot","IsV","RandomUnit","Scalar","ScalarT","dot","dot","random_unit","random_unit_with"],"q":["rsp2_array_typesrsp2_array_types::mat","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_array_types::vee","","","","","","","",""],"d":["","","","","","","","Zero-cost transformations from sequences of arrays into …","","","A linear algebra dense matrix with 2 rows and fixed width.","A square dense 2x2 matrix.","A linear algebra dense matrix with 3 rows and fixed width.","A square dense 3x3 matrix.","A linear algebra dense matrix with 4 rows and fixed width.","A square dense 4x4 matrix.","","Zero-cost transformations from sequences of <code>Vn</code> into …","A 2-dimensional vector with operations for linear algebra.","A 3-dimensional vector with operations for linear algebra.","A 4-dimensional vector with operations for linear algebra.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the shortest angle (as a value in <code>[0, pi]</code>) between …","Get the shortest angle (as a value in <code>[0, pi]</code>) between …","Get the shortest angle (as a value in <code>[0, pi]</code>) between …","","","","Cast into a plain <code>&[[T; m]; n]</code>.","","","","Cast into a plain <code>&[[T; m]; n]</code>.","","Cast into a plain <code>&[[T; m]; n]</code>.","","","Cast into a plain <code>&mut [[T; m]; n]</code>.","","","","","Cast into a plain <code>&mut [[T; m]; n]</code>.","","","","Cast into a plain <code>&mut [[T; m]; n]</code>.","","","Get a basis vector.","Get a basis vector.","Get a basis vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cross-product. Only defined on 3-dimensional vectors.","","","","","","","","","","","","","","","","","","","","","","","","","Matrix determinant.","","","Matrix determinant.","Matrix determinant.","Matrix determinant.","Matrix determinant.","Matrix determinant.","","","","","","","","","","","","","","","","","","","Get the inner product of two vectors.","","","Get the inner product of two vectors.","","Get the inner product of two vectors.","Casts a sequence of arrays into <code>V2</code>/<code>V3</code>/<code>V4</code>s.","Casts a sequence of arrays into <code>V2</code>/<code>V3</code>/<code>V4</code>s.","Mutably borrow a sequence of arrays as <code>V2</code>/<code>V3</code>/<code>V4</code>s.","Mutably borrow a sequence of arrays as <code>V2</code>/<code>V3</code>/<code>V4</code>s.","Borrow a sequence of arrays as <code>V2</code>/<code>V3</code>/<code>V4</code>s.","Borrow a sequence of arrays as <code>V2</code>/<code>V3</code>/<code>V4</code>s.","","","","","","","Construct the identity matrix.","Construct the identity matrix.","Construct the identity matrix.","Construct the identity matrix.","Construct the identity matrix.","Construct the identity matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a diagonal matrix.","","Construct a diagonal matrix.","Construct a diagonal matrix.","","Construct a diagonal matrix.","Construct a diagonal matrix.","Construct a diagonal matrix.","Construct a fixed-size vector from a function on indices.","Construct a fixed-size vector from a function on indices.","Construct a fixed-size vector from a function on indices.","","Construct a fixed-size matrix from a function on indices.","Construct a fixed-size matrix from a function on indices.","Construct a fixed-size matrix from a function on indices.","","","","","Construct a fixed-size matrix from a function on indices.","Construct a fixed-size matrix from a function on indices.","Construct a fixed-size matrix from a function on indices.","","","","Construct a fixed-size matrix from a function on indices.","","Construct a fixed-size matrix from a function on indices.","Construct a fixed-size matrix from a function on indices.","","","","","","","","","","","","","","","","Cast into a plain <code>[[T; m]; n]</code>.","Cast into a plain <code>[[T; m]; n]</code>.","","","","Cast into a plain <code>[[T; m]; n]</code>.","","","","","Matrix inverse.","Matrix inverse.","","Matrix inverse.","Matrix inverse.","Matrix inverse.","Matrix inverse.","","","","","","","","","","","","","","","","Apply a function to each element.","Apply a function to each element.","Apply a function to each element.","Map each scalar element of a matrix.","Map each scalar element of a matrix.","Map each scalar element of a matrix.","Map each scalar element of a matrix.","Map each scalar element of a matrix.","Map each scalar element of a matrix.","Map each scalar element of a matrix.","Map each scalar element of a matrix.","Map each scalar element of a matrix.","Small fixed-size matrix types, compatible with <code>V2</code>/<code>V3</code>/<code>V4</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform elementwise multiplication, or multiplication of …","Perform elementwise multiplication, or multiplication of …","Perform elementwise multiplication, or multiplication of …","","","","","","","","","","","","","","","","","","","Get the vector’s magnitude.","Get the vector’s magnitude.","Get the vector’s magnitude.","","","","Apply a fallible function to each element, with …","Apply a fallible function to each element, with …","Apply a fallible function to each element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Get the part of the vector that is parallel to <code>r</code>.","Get the part of the vector that is parallel to <code>r</code>.","Get the part of the vector that is parallel to <code>r</code>.","","","","","","","Get the part of the vector that is perpendicular to <code>r</code>.","Get the part of the vector that is perpendicular to <code>r</code>.","Get the part of the vector that is perpendicular to <code>r</code>.","Generate a randomly-oriented unit vector whose direction …","Generate a randomly-oriented unit vector whose direction …","Generate a randomly-oriented unit vector whose direction …","","Generate a randomly-oriented unit vector whose direction …","","Generate a randomly-oriented unit vector whose direction …","Generate a randomly-oriented unit vector whose direction …","","","","","","","Get the vector’s squared magnitude.","Get the vector’s squared magnitude.","Get the vector’s squared magnitude.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Matrix transpose. (does not conjugate)","","","","","","Matrix transpose. (does not conjugate)","","Matrix transpose. (does not conjugate)","","","","","","","","","","","","","","","","","","","","","","Construct a fixed-size vector from a function on indices.","Construct a fixed-size vector from a function on indices.","Construct a fixed-size vector from a function on indices.","","","","","","","Apply a fallible function to each element, with …","Apply a fallible function to each element, with …","Apply a fallible function to each element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","Apply a fallible function to each scalar element, with …","","","","","","","Normalize the vector.","Normalize the vector.","Normalize the vector.","Casts a sequence of <code>V2</code>/<code>V3</code>/<code>V4</code>s into arrays.","Casts a sequence of <code>V2</code>/<code>V3</code>/<code>V4</code>s into arrays.","Mutably borrow a sequence of <code>V2</code>/<code>V3</code>/<code>V4</code>s as arrays.","Mutably borrow a sequence of <code>V2</code>/<code>V3</code>/<code>V4</code>s as arrays.","Borrow a sequence of <code>V2</code>/<code>V3</code>/<code>V4</code>s as arrays.","Borrow a sequence of <code>V2</code>/<code>V3</code>/<code>V4</code>s as arrays.","","Get a zero vector.","","","Get a zero vector.","","Get a zero vector.","","","","Construct the zero matrix.","Construct the zero matrix.","Construct the zero matrix.","Construct the zero matrix.","Construct the zero matrix.","","","","Construct the zero matrix.","Construct the zero matrix.","","Construct the zero matrix.","","","Construct the zero matrix.","","","Implementation detail of the inherent method …","Output of <code>det</code>. Probably a scalar type.","","Argument to <code>from_diag</code>. Probably a vector type like <code>V3<X></code>.","Implementation detail of the inherent method …","Implementation detail of the free function <code>mat::from_fn</code>.","Implementation detail of the inherent method …","Implementation detail of the free function <code>mat::from_array</code>…","Implementation detail of the inherent method …","Implementation detail of some free functions that defer …","","","","Implementation detail of the inherent method <code>{M2,M3,M4}::t</code>…","Output of <code>transpose</code>. Probably a matrix with the …","","","","Construct a matrix from a 2D array (of rows).","","","","","Matrix inverse.","","","Implementation detail of the inherent method …","Trait that provides associated types for <code>V2, V3, V4</code>.","Implementation detail of the inherent method …","","Element type of the vector.","Inner product of vectors.","","",""],"i":[1,2,3,4,5,6,7,0,0,0,0,0,0,0,0,0,8,0,0,0,0,1,1,2,2,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,1,2,3,4,5,6,1,2,3,4,4,4,4,5,5,5,5,6,6,6,6,4,4,4,4,5,5,5,5,6,6,6,6,1,2,3,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,9,9,10,10,11,4,5,6,1,2,3,4,4,4,5,5,5,6,6,6,1,2,3,4,5,6,1,1,2,2,3,3,7,7,7,7,7,7,1,2,3,4,5,6,9,10,11,4,5,6,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,1,2,3,4,5,6,9,9,10,10,11,11,4,5,6,1,2,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,1,2,3,4,5,6,1,2,3,4,5,6,4,4,4,4,5,5,5,5,6,6,6,6,9,9,10,10,11,4,5,6,9,10,11,1,2,3,4,4,4,5,5,5,6,6,6,1,2,3,4,4,4,5,5,5,6,6,6,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,4,4,4,5,5,5,6,6,6,1,2,3,9,10,11,1,2,3,4,4,4,5,5,5,6,6,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,1,1,2,2,3,1,2,3,4,5,6,1,2,3,1,1,2,2,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,1,2,3,4,5,6,1,1,2,2,3,3,4,4,4,4,5,5,5,5,6,6,6,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,4,4,4,5,5,5,6,6,6,1,2,3,4,5,6,1,2,3,8,8,8,8,8,8,0,1,1,2,2,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,12,0,0,0,13,0,0,0,0,0,0,0,14,15,16,0,0,12,12,15,0,13,17,12,14,0,18,16,0,0,0,19,0,0,20,21,21],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["v2",3]]],[[["v2",3]]],[[["v3",3]]],[[["v3",3]]],[[["v4",3]]],[[["v4",3]]],[[["m2",3]]],[[["v2",3],["m2",3]]],[[["m2",3]]],[[["m2",3],["v3",3]]],[[["m2",3]]],[[["v4",3],["m2",3]]],[[["m3",3]]],[[["m3",3],["v2",3]]],[[["m3",3]]],[[["m3",3],["v3",3]]],[[["m3",3]]],[[["v4",3],["m3",3]]],[[["m4",3]]],[[["m4",3],["v4",3]]],[[["m4",3]]],[[["m4",3],["v3",3]]],[[["m4",3]]],[[["v2",3],["m4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scalart",6]],[[],["scalart",6]],[[],["scalart",6]],[[]],[[]],[[]],[[],["arrayt",6]],[[]],[[]],[[]],[[],["arrayt",6]],[[]],[[],["arrayt",6]],[[]],[[]],[[],["arrayt",6]],[[]],[[]],[[]],[[]],[[],["arrayt",6]],[[]],[[]],[[]],[[],["arrayt",6]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["v2",3]],[[],["v3",3]],[[],["v4",3]],[[],["m2",3]],[[],["m3",3]],[[],["m4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["v2",3]],["ordering",4]],[[["v3",3]],["ordering",4]],[[["v4",3]],["ordering",4]],[[["m2",3]],["ordering",4]],[[["m3",3]],["ordering",4]],[[["m4",3]],["ordering",4]],[[]],[[],["v2",3]],[[],["v3",3]],[[],["v4",3]],[[],["m2",3]],[[],["m3",3]],[[],["m4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["dett",6]],[[]],[[]],[[],["dett",6]],[[],["dett",6]],[[],["dett",6]],[[],["dett",6]],[[],["dett",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scalart",6]],[[["v2",3]],["scalart",6]],[[["v3",3]],["scalart",6]],[[],["scalart",6]],[[["v4",3]],["scalart",6]],[[],["scalart",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["v2",3]],["bool",15]],[[["v3",3]],["bool",15]],[[["v4",3]],["bool",15]],[[["m2",3]],["bool",15]],[[["m3",3]],["bool",15]],[[["m4",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["v2",3]]],[[["diagt",6]]],[[["v3",3]]],[[["diagt",6]]],[[["diagt",6]]],[[["v4",3]]],[[["diagt",6]]],[[["diagt",6]]],[[["diagt",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arrayt",6]],[[],["arrayt",6]],[[]],[[]],[[]],[[],["arrayt",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["v2",3]],[[],["v3",3]],[[],["v4",3]],[[],[["v4",3],["m2",3]]],[[],[["v3",3],["m2",3]]],[[],[["m2",3],["v2",3]]],[[],[["m3",3],["v2",3]]],[[],[["v3",3],["m3",3]]],[[],[["v4",3],["m3",3]]],[[],[["m4",3],["v2",3]]],[[],[["m4",3],["v4",3]]],[[],[["v3",3],["m4",3]]],null,[[["v2",3],["m2",3]]],[[["m2",3]]],[[["v4",3],["m2",3]]],[[["m2",3]]],[[]],[[["m2",3],["v3",3]]],[[["m2",3]]],[[["m3",3],["v2",3]]],[[["m3",3]]],[[["m3",3],["v3",3]]],[[["m3",3]]],[[]],[[["v4",3],["m3",3]]],[[["m3",3]]],[[["m4",3],["v4",3]]],[[["m4",3]]],[[]],[[["v2",3],["m4",3]]],[[["m4",3]]],[[["m4",3],["v3",3]]],[[["m4",3]]],[[["v4",3],["m2",3]]],[[["m3",3]]],[[]],[[["v2",3]]],[[["v2",3]]],[[["v3",3]]],[[["v2",3],["m2",3]]],[[["m2",3]]],[[["m2",3],["v3",3]]],[[["m2",3]]],[[["v3",3]]],[[["m2",3]]],[[["m3",3],["v2",3]]],[[]],[[["m3",3],["v3",3]]],[[["m3",3]]],[[["v4",3],["m3",3]]],[[["m3",3]]],[[["v2",3],["m4",3]]],[[["m4",3]]],[[["m4",3],["v3",3]]],[[["m4",3]]],[[["m4",3],["v4",3]]],[[["m4",3]]],[[["v4",3]]],[[]],[[["v4",3]]],[[["v2",3],["m2",3]]],[[["v4",3],["m2",3]]],[[["m2",3]]],[[["m3",3],["v2",3]]],[[["m3",3]]],[[["m3",3],["v3",3]]],[[["m3",3]]],[[["v4",3],["m3",3]]],[[["m3",3]]],[[["v2",3],["m4",3]]],[[["m4",3]]],[[["m4",3],["v3",3]]],[[["m4",3]]],[[["m4",3],["v4",3]]],[[["m4",3]]],[[["m2",3]]],[[["m2",3],["v3",3]]],[[["m2",3]]],[[["v2",3]]],[[["v4",3]]],[[["v4",3]]],[[]],[[]],[[]],[[["v3",3]]],[[["v3",3]]],[[["v2",3]]],[[["m3",3]]],[[["m3",3],["v3",3]]],[[["m4",3],["v3",3]]],[[["m4",3]]],[[["m4",3],["v4",3]]],[[["m4",3]]],[[["v4",3]]],[[["m2",3]]],[[["v4",3]]],[[["m2",3],["v3",3]]],[[["v3",3]]],[[["m3",3],["v2",3]]],[[["v3",3]]],[[["v2",3]]],[[["m2",3]]],[[["v2",3]]],[[["v2",3],["m2",3]]],[[["m2",3]]],[[]],[[["v4",3],["m2",3]]],[[]],[[["m3",3]]],[[["m4",3]]],[[["v4",3],["m3",3]]],[[["v2",3],["m4",3]]],[[["m3",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["v2",3]],["bool",15]],[[["v3",3]],["bool",15]],[[["v4",3]],["bool",15]],[[["m2",3]],["bool",15]],[[["m3",3]],["bool",15]],[[["m4",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scalart",6]],[[],["scalart",6]],[[],["scalart",6]],[[]],[[]],[[]],[[],[["option",4],["v2",3]]],[[],[["option",4],["v3",3]]],[[],[["v4",3],["option",4]]],[[],[["m2",3],["option",4]]],[[],[["m2",3],["option",4]]],[[],[["m2",3],["option",4]]],[[],[["m3",3],["option",4]]],[[],[["option",4],["m3",3]]],[[],[["option",4],["m3",3]]],[[],[["option",4],["m4",3]]],[[],[["option",4],["m4",3]]],[[],[["option",4],["m4",3]]],[[]],[[]],[[]],[[["v2",3]],[["option",4],["ordering",4]]],[[["v3",3]],[["option",4],["ordering",4]]],[[["v4",3]],[["option",4],["ordering",4]]],[[["m2",3]],[["option",4],["ordering",4]]],[[["m3",3]],[["option",4],["ordering",4]]],[[["m4",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["scalart",6]],[[],["scalart",6]],[[],["scalart",6]],[[["v2",3]]],[[["v2",3]]],[[["v3",3]]],[[["v3",3]]],[[["v4",3]]],[[["v4",3]]],[[["m2",3]]],[[["m2",3]]],[[["m2",3],["v3",3]]],[[["m2",3]]],[[["v2",3],["m2",3]]],[[["v4",3],["m2",3]]],[[["m3",3]]],[[["v4",3],["m3",3]]],[[["m3",3]]],[[["m3",3],["v3",3]]],[[["m3",3]]],[[["m3",3],["v2",3]]],[[["m4",3]]],[[["m4",3],["v3",3]]],[[["m4",3]]],[[["v2",3],["m4",3]]],[[["m4",3],["v4",3]]],[[["m4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[],["transposet",6]],[[]],[[]],[[]],[[]],[[]],[[],["transposet",6]],[[]],[[],["transposet",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["v2",3]]],[[],[["result",4],["v3",3]]],[[],[["result",4],["v4",3]]],[[],[["result",4],["m2",3]]],[[],[["result",4],["m2",3]]],[[],[["result",4],["m2",3]]],[[],[["result",4],["m3",3]]],[[],[["result",4],["m3",3]]],[[],[["result",4],["m3",3]]],[[],[["result",4],["m4",3]]],[[],[["m4",3],["result",4]]],[[],[["result",4],["m4",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["intomatrix",8]]],[[]],[[]],[[]],[[]],[[],["inv",8]],[[]],[[]],null,null,null,null,null,[[],["scalart",6]],[[],["scalart",6]],[[]],[[]]],"p":[[3,"V2"],[3,"V3"],[3,"V4"],[3,"M2"],[3,"M3"],[3,"M4"],[8,"Envee"],[8,"Unvee"],[6,"M22"],[6,"M33"],[6,"M44"],[8,"IntoArray"],[8,"FromDiag"],[8,"IntoMatrix"],[8,"Det"],[8,"Transpose"],[8,"FromFn"],[8,"Inv"],[8,"IsV"],[8,"Dot"],[8,"RandomUnit"]]},\
"rsp2_assert_close":{"doc":"","t":[8,3,17,16,3,12,14,11,11,11,11,10,14,11,11,14,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,12],"n":["CheckClose","CheckCloseError","DEFAULT_NONZERO_TOL","Scalar","Tolerances","abs","assert_close","borrow","borrow","borrow_mut","borrow_mut","check_close","check_close","clone","clone_into","debug_assert_close","fmt","fmt","fmt","from","from","into","into","rel","to_owned","to_string","tol","try_from","try_from","try_into","try_into","type_id","type_id","values"],"q":["rsp2_assert_close","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Test that all values of self and other are close.","Like <code>assert_close</code>, but produces a result.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,2,0,2,3,2,3,1,0,2,2,0,2,3,3,2,3,2,3,2,2,3,3,2,3,2,3,2,3,3],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["tolerances",3]],[["result",4],["checkcloseerror",3]]],null,[[],["tolerances",3]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[8,"CheckClose"],[3,"Tolerances"],[3,"CheckCloseError"]]},\
"rsp2_bond_polarizability":{"doc":"Computes raman intensities of gamma eigenkets using a …","t":[13,13,4,4,13,13,13,3,4,6,3,6,13,3,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,5,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Average","BackscatterZ","BondPolError","BondType","CC","CH","HH","Input","LightPolarization","Mass","PolConstant","PolConstants","Polarized","RamanTensor","UnsupportedBond","as_fail","bonds","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c1","c2","c3","clone","clone_into","cmp","compute_ev_raman_tensors","default_CH_pol_constants","eq","equivalent","ev_eigenvectors","ev_frequencies","fmt","fmt","fmt","from","from","from","from","from","from","from_function","from_usize","hash","integrate_intensity","into","into","into","into","into","into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","max_len","nanotube_CC_pol_constants","partial_cmp","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","site_elements","site_masses","slice","slice_mut","subset","subset","subset","subset","subset","subset","temperature","tensor","to_owned","to_string","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","incident","scattered"],"q":["rsp2_bond_polarizability","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_bond_polarizability::LightPolarization",""],"d":["","","","","","","","Interface for computing bond polarization.","","","","","","","","","","","","","","","","","","","","","","<code>a_par  -   a_perp</code>","<code>a\'_par -   a\'_perp</code>","<code>a\'_par + 2 a\'_perp</code>","","","","","","","","Normal mode eigenvectors, normalized.","Normal mode frequencies, in cm^-1.","","","","","","","","","","","","","","","","","","","","","","","","","","maximum bond length","","","","","","","","","Element of each site.  Used to determine bond …","Masses of each site, in AMU.","","","","","","","","","Kelvin.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,0,0,2,2,2,0,0,0,0,0,1,0,3,3,4,4,5,6,1,2,3,4,5,6,1,2,3,5,5,5,2,2,2,4,0,2,2,4,4,2,3,3,4,5,6,1,2,3,2,2,2,6,4,5,6,1,2,3,4,5,6,1,2,3,5,0,2,4,5,6,1,2,3,4,4,2,2,4,5,6,1,2,3,4,6,2,3,2,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,7,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["fail",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["bondtype",4]],[[]],[[["bondtype",4]],["ordering",4]],[[],[["result",4],["bondpolerror",4],["vec",3]]],[[],["polconstants",6]],[[["bondtype",4]],["bool",15]],[[],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnmut",8]]],[[["usize",15]]],[[]],[[["lightpolarization",4]],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["polconstants",6]],[[["bondtype",4]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],null,[[],["m33",6]],[[]],[[],["string",3]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[4,"LightPolarization"],[4,"BondType"],[4,"BondPolError"],[3,"Input"],[3,"PolConstant"],[3,"RamanTensor"],[13,"Polarized"]]},\
"rsp2_clap":{"doc":"","t":[14,14],"n":["arg","arg_impl"],"q":["rsp2_clap",""],"d":["Alternative to <code>clap_app!</code>.",""],"i":[0,0],"f":[null,null],"p":[]},\
"rsp2_dftbplus":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"rsp2_dynmat":{"doc":"","t":[12,12,12,12,12,12,12,12,12,12,3,3,18,3,3,3,3,6,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","0","0","0","0","0","0","1","Cereal","Complex33","DESIGNATED_CELL","DispI","DynamicalMatrix","Eigenvalues","EqnI","FailResult","ForceConstants","OperI","PrimI","StarI","SuperForceConstants","SuperI","add","add_assign","add_rows_for_other_cells","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cereal","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","col","complex_blocks","compute_eigensolutions_dense_gamma","compute_required_rows","conj_t","conj_t","deserialize","deserialize","dim","drop_non_designated_rows","dynmat_at_cart_q","eigenvalues","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_cereal","from_dense_matrix","hash","hash","hash","hash","hash","hash","hermitianize","impose_translational_invariance","index","index","index","index","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into_transpose","is_real","is_zero","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","load_dwim","max_hermitian_error","ne","ne","ne","ne","ne","ne","ne","neg","new","new","new","new","new","new","num_atoms","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","permuted_by","read_npz","row_ptr","save_dwim","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","serialize","serialize","sub","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","to_dense_flat_real","to_dense_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_super_force_constants_with_all_rows","to_super_force_constants_with_zeroed_rows","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_npz","zero"],"q":["rsp2_dynmatd":["","","","","","","","","","","","","Displaced atoms must always be in this cell.","","","Trivial wrapper type to help ensure eigenvalues don’t …","","","Force constants matrix, with only rows for atoms in …","","","","Capable of representing the complete force constants …","","","","Take <code>SuperForceConstants</code> where <code>row_atom</code> is always in …","","","","","","","","","","","","","","","","","","","","","","","","","Create a struct that can be serialized using serde.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute a partially filled force constants matrix that …","","","","","","Drops all of the rows outside <code>DESIGNATED_CELL</code>, to recover …","Compute the dynamical matrix at a q-point.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct from a deserialized <code>\'.json.gz\'</code>.","","","","","","","","","Imposes translational invariance like Phonopy.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Load a dynamical matrix in any of rsp2’s …","","","","","","","","","","","","","","","","","","","","","","","","Read from a scipy BSR matrix saved to NPZ.","","Save a dynamical matrix in any of rsp2’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the matrix is real, produce a flat <code>Vec</code> representation.","","","","","","","","","","","","","","","","","","","Convert to a type capable of containing data in arbitrary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Save to an NPZ file as a scipy BSR matrix.",""],"i":[1,2,3,4,5,6,7,8,9,9,0,0,7,0,0,0,0,0,0,0,0,0,0,0,9,9,10,11,1,2,3,4,5,6,10,7,8,12,9,11,1,2,3,4,5,6,10,7,8,12,9,8,1,2,3,4,5,6,10,7,8,9,1,2,3,4,5,6,10,7,8,9,1,2,3,4,5,6,12,12,8,7,8,9,12,9,12,10,7,11,1,2,3,4,5,6,9,1,2,3,4,5,6,1,1,2,2,3,3,4,4,5,5,6,6,10,7,8,9,11,1,2,3,4,5,6,10,7,8,12,9,8,10,1,2,3,4,5,6,8,7,1,2,3,4,5,6,11,1,2,3,4,5,6,10,7,8,12,9,10,8,9,11,1,2,3,4,5,6,10,7,8,12,9,8,8,1,2,3,4,5,6,9,9,1,2,3,4,5,6,8,1,2,3,4,5,6,10,8,12,8,11,1,2,3,4,5,6,10,7,8,12,9,12,9,9,11,1,2,3,4,5,6,10,7,8,12,9,8,10,1,2,3,4,5,6,10,7,8,9,1,2,3,4,5,6,7,7,11,1,2,3,4,5,6,10,7,8,12,9,11,1,2,3,4,5,6,10,7,8,12,9,11,1,2,3,4,5,6,10,7,8,12,9,8,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["complex33",3]]],[[["complex33",3]]],[[["supercelltoken",3]],["superforceconstants",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cereal",3]],[[],["dispi",3]],[[],["primi",3]],[[],["superi",3]],[[],["stari",3]],[[],["operi",3]],[[],["eqni",3]],[[],["superforceconstants",3]],[[],["forceconstants",3]],[[],["dynamicalmatrix",3]],[[],["complex33",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dispi",3]],["ordering",4]],[[["primi",3]],["ordering",4]],[[["superi",3]],["ordering",4]],[[["stari",3]],["ordering",4]],[[["operi",3]],["ordering",4]],[[["eqni",3]],["ordering",4]],null,null,[[]],[[["supercelltoken",3]],[["failresult",6],["forceconstants",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],null,[[["supercelltoken",3]],["forceconstants",3]],[[["v3",3],["supercelltoken",3],["coords",3]],["dynamicalmatrix",3]],null,[[["dispi",3]],["bool",15]],[[["primi",3]],["bool",15]],[[["superi",3]],["bool",15]],[[["stari",3]],["bool",15]],[[["operi",3]],["bool",15]],[[["eqni",3]],["bool",15]],[[["complex33",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["cereal",3]],["failresult",6]],[[["vec",3],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15],["supercelltoken",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["dynamicalmatrix",3],["failresult",6]]],[[],["f64",15]],[[["dispi",3]],["bool",15]],[[["primi",3]],["bool",15]],[[["superi",3]],["bool",15]],[[["stari",3]],["bool",15]],[[["operi",3]],["bool",15]],[[["eqni",3]],["bool",15]],[[["complex33",3]],["bool",15]],[[["complex33",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[["dispi",3]],[["option",4],["ordering",4]]],[[["primi",3]],[["option",4],["ordering",4]]],[[["superi",3]],[["option",4],["ordering",4]]],[[["stari",3]],[["option",4],["ordering",4]]],[[["operi",3]],[["option",4],["ordering",4]]],[[["eqni",3]],[["option",4],["ordering",4]]],[[["perm",3]],["superforceconstants",3]],[[["seek",8],["read",8]],["failresult",6]],null,[[],["failresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["complex33",3]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["vec",3],["option",4]]],[[],[["vec",3],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["supercelltoken",3]],["superforceconstants",3]],[[["supercelltoken",3]],["superforceconstants",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["seek",8],["write",8]],["failresult",6]],[[]]],"p":[[3,"DispI"],[3,"PrimI"],[3,"SuperI"],[3,"StarI"],[3,"OperI"],[3,"EqnI"],[3,"ForceConstants"],[3,"DynamicalMatrix"],[3,"Complex33"],[3,"SuperForceConstants"],[3,"Eigenvalues"],[3,"Cereal"]]},\
"rsp2_fs_util":{"doc":"","t":[3,3,13,4,6,3,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,12],"n":["ActualTempDir","Copy","Custom","FsError","FsResult","Move","OnePath","TempDir","TwoPath","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalize","canonicalize_parent","clobber","clobber","clone","clone","clone_into","clone_into","close","close","copy","cp_a","create","create_dir","default","default","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","follow_links","for_path","from","from","from","from","from","from","hard_link","into","into","into","into","into","into_path","into_path","link","magic_directory","magic_directory","many","many","mv","new","new","new","new","new_in","new_in","new_labeled","one","one","open","open_text","path","path","recover","remove_dir","remove_file","rm_rf","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_with_recovery","two_path","type_id","type_id","type_id","type_id","type_id","write","dest","message","path","source","source","src","verb"],"q":["rsp2_fs_util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_fs_util::FsError","","","","","",""],"d":["A directory in the filesystem that is automatically …","Builder for configuring a <code>cp -a</code> command.","","","","Builder for configuring a <code>mv</code> command.","","Wrapper around <code>tempdir::TempDir</code> that does not destroy the …","","","","","","","","","","","","","","Wrapper around <code>std::fs::canonicalize</code> that adds context.","Canonicalizes a path where the final component need not …","Allow existing files to be replaced.","Allow existing files to be replaced.","","","","","","Closes and removes the temporary directory, returing a …","Wrapper around <code>std::fs::copy</code> that adds context.","Calls <code>cp -aT</code>.","Wrapper around <code>File::create</code> that adds context.","Wrapper around <code>std::fs::create_dir</code> that adds context.","","","","","","","","","","","Copy the referent of links rather than the links …","","","","","","","","","","","","","","","Unwraps the <code>Path</code> contained in the <code>TempDir</code> and returns it. …","Try to create hard links instead of copying, when …","When the destination exists and is a directory, <code>one</code> will …","When the destination exists and is a directory, <code>one</code> will …","<code>mv -t dest src1 [src2...]</code>","<code>mv -t dest src1 [src2...]</code>","Move a file or directory, possibly across filesystems.","","","","Attempts to make a temporary directory inside of …","","Attempts to make a temporary directory inside of <code>tmpdir</code> …","Add a label that will be displayed when the <code>TempDir</code> is …","<code>mv src dest</code>","<code>mv src dest</code>","Wrapper around <code>File::open</code> that adds context.","Wrapper around <code>File::open</code> that adds context and makes a …","","Accesses the <code>Path</code> to the temporary directory.","Recover the tempdir, as if we were unwinding.","Wrapper around <code>std::fs::remove_file</code> that adds context.","Wrapper around <code>std::fs::remove_file</code> that adds context.","Simulates <code>rm -rf</code>.","","","","","","","","","","","","","","","Recover the tempdir if a closure returns Err.","","","","","","","Wrapper around <code>std::fs::write</code> that adds context.","","","","","","",""],"i":[0,0,1,0,0,0,1,0,1,2,3,4,5,2,1,3,4,5,2,1,3,0,0,4,5,4,5,4,5,2,3,0,0,0,0,4,5,2,3,4,5,2,1,1,3,5,1,4,5,2,2,1,3,0,4,5,2,1,3,2,3,5,4,5,4,5,0,4,5,2,3,2,3,2,4,5,0,0,2,3,2,0,0,0,1,4,5,1,4,5,2,1,3,4,5,2,1,3,2,1,4,5,2,1,3,0,6,7,7,7,6,6,6],"f":[null,null,null,null,null,null,null,null,null,[[],["path",3]],[[],["path",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["pathbuf",3],["fsresult",6]]],[[],[["pathbuf",3],["fsresult",6]]],[[["bool",15]]],[[["bool",15]]],[[],["move",3]],[[],["copy",3]],[[]],[[]],[[],["ioresult",6]],[[],[["error",3],["result",4]]],[[],["fsresult",6]],[[],["fsresult",6]],[[],[["file",3],["fsresult",6]]],[[],["fsresult",6]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["bool",15]]],[[["error",3]]],[[]],[[]],[[]],[[["actualtempdir",3]]],[[]],[[]],[[],["fsresult",6]],[[]],[[]],[[]],[[]],[[]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[],["fsresult",6]],[[],["fsresult",6]],[[],["fsresult",6]],[[]],[[]],[[["str",15]],[["ioresult",6],["tempdir",3]]],[[["str",15]],[["tempdir",3],["error",3],["result",4]]],[[["str",15]],[["ioresult",6],["tempdir",3]]],[[["str",15]],[["tempdir",3],["error",3],["result",4]]],[[["str",15],["str",15]],[["ioresult",6],["tempdir",3]]],[[],["fsresult",6]],[[],["fsresult",6]],[[],[["file",3],["fsresult",6]]],[[],[["fsresult",6],["bufreader",3]]],[[],["path",3]],[[],["path",3]],[[]],[[],["fsresult",6]],[[],["fsresult",6]],[[],["fsresult",6]],[[],[["option",4],["error",8]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15],["error",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["fsresult",6]],null,null,null,null,null,null,null],"p":[[4,"FsError"],[3,"TempDir"],[3,"ActualTempDir"],[3,"Move"],[3,"Copy"],[13,"TwoPath"],[13,"OnePath"]]},\
"rsp2_integration_test":{"doc":"","t":[0,0,14,5,6,8,3,6,3,16,6,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,3,3,3,3,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,11,11,12,12,11,11,12,12,12,11,12,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["cli_test","filetypes","impl_json","resource","AfterRun","CheckFile","CliTest","DirChecker","Environment","OtherArgs","Result","after_run","arg","args","borrow","borrow","borrow_mut","borrow_mut","cargo_binary","check","check_against","check_file","from","from","init","into","into","lift_into","lift_into","new","read_file","run","sculpt","sculpt","subset","subset","try_from","try_from","try_into","try_into","type_id","type_id","0","0","Dynmat","DynmatTolerances","Error","Frequencies","FrequencyTolerances","MaybeZerolike","MaybeZerolikeTolerances","Primitive","RamanJson","RamanJsonTolerances","abs_tol","as_fail","as_fail","as_ref","average_3d","backscatter","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cart_ops","cause","causes","check_against","check_against","check_against","check_against","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","col","compat","complex_blocks","context","coords","deref","deserialize","deserialize","deserialize","deserialize","dim","downcast","downcast_mut","downcast_ref","eq","eq","eq","find_root_cause","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frequency","frequency","from","from","from","from","from","from","from","from","from","from","from","from","from_boxed_compat","intensity_nonzero_rel_tol","intensity_nonzero_thresh","into","into","into","into","into","into","into","into","into","into","iter_causes","iter_chain","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","load","load","load","load","load_json","masses","max_acoustic","ne","ne","ne","negative_ok","raman_tensor","read_file","read_file","rel_tol","rel_tol","rel_tol","root_cause","row_ptr","save","save","save","save","save_json","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","serialize","serialize","serialize","serialize","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero_thresh"],"q":["rsp2_integration_test","","","","rsp2_integration_test::cli_test","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_integration_test::filetypesd":["","","","","","","","","Proof of the global environment for a test case having …","","","","","","","","","","","","","<code>check</code> with a standard trait-based implementation.","","","Set up the global environment for the test case.","","","","","","","","","","","","","","","","","","","","","","The <code>Error</code> type, which can contain any failure.","","","Implements a comparison which requires that either both …","","","","","","","Return a reference to the underlying failure that this …","","","","Gets a reference to the <code>Backtrace</code> for this <code>Error</code>.","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the underlying cause of this <code>Error</code>…","Deprecated alias to <code>iter_causes</code>.","","","","","","","","","","","","","","","","Wraps <code>Error</code> in a compatibility type.","","Provides context for this <code>Error</code>.","","","","","","","","Attempts to downcast this <code>Error</code> to a particular <code>Fail</code> type.","Attempts to downcast this <code>Error</code> to a particular <code>Fail</code> type …","Attempts to downcast this <code>Error</code> to a particular <code>Fail</code> type …","","","","Returns the “root cause” of this error - the last …","","","","","","","","","","","","","","","","","","","","","","","","","Creates an <code>Error</code> from <code>Box<std::error::Error></code>.","Used for non-zerolike intensities","Intensities less than …","","","","","","","","","","","Returns a iterator over the causes of this error with the …","Returns a iterator over all fails up the chain from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated alias to <code>find_root_cause</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,0,2,2,2,2,3,2,3,2,2,1,2,2,3,3,2,3,2,3,2,1,2,2,3,2,3,2,3,2,3,2,3,4,5,0,0,0,0,0,0,0,0,0,0,6,7,7,7,8,8,7,4,9,10,8,5,11,12,13,6,7,4,9,10,8,5,11,12,13,6,7,12,7,7,4,8,5,13,9,10,5,11,6,9,10,5,11,6,13,7,13,7,12,4,4,8,12,13,13,7,7,7,4,8,13,7,4,9,10,8,5,11,13,6,7,7,10,8,4,9,10,8,5,11,12,13,6,7,7,7,7,10,10,4,9,10,8,5,11,12,13,6,7,7,7,4,9,10,8,5,11,12,13,6,7,4,8,12,13,0,12,9,4,8,13,11,8,8,13,9,11,6,7,13,4,8,12,13,0,4,9,10,8,5,11,12,13,6,7,4,8,12,13,4,9,10,8,5,11,12,13,6,7,9,10,5,11,6,7,4,9,10,8,5,11,12,13,6,7,4,9,10,8,5,11,12,13,6,7,4,9,10,8,5,11,12,13,6,7,11],"f":[null,null,null,[[["str",15]],["pathbuf",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["environment",3]]],[[]],[[]],[[["path",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["environment",3]]],[[["path",3]],["result",6]],[[],["result",6]],[[]],[[]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["fail",8]],[[],["fail",8]],[[],["fail",8]],null,null,[[],["backtrace",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["fail",8]],[[],["causes",3]],[[["frequencytolerances",3]]],[[["ramanjson",3],["ramanjsontolerances",3]]],[[["maybezeroliketolerances",3]]],[[["dynmattolerances",3],["dynmat",3]]],[[],["frequencytolerances",3]],[[],["ramanjsontolerances",3]],[[],["maybezerolike",3]],[[],["maybezeroliketolerances",3]],[[],["dynmattolerances",3]],[[]],[[]],[[]],[[]],[[]],null,[[],[["compat",3],["error",3]]],null,[[],["context",3]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],[["error",3],["result",4]]],[[],["option",4]],[[],["option",4]],[[["frequencies",3]],["bool",15]],[[["ramanjson",3]],["bool",15]],[[["dynmat",3]],["bool",15]],[[],["fail",8]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",3]],[[]],[[]],[[["box",3],["global",3],["error",8]],["error",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["causes",3]],[[],["causes",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],null,null,[[["frequencies",3]],["bool",15]],[[["ramanjson",3]],["bool",15]],[[["dynmat",3]],["bool",15]],null,null,[[["path",3]],[["error",3],["result",4]]],[[["path",3]],[["error",3],["result",4]]],null,null,null,[[],["fail",8]],null,[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[8,"CheckFile"],[3,"CliTest"],[3,"Environment"],[3,"Frequencies"],[3,"MaybeZerolike"],[3,"DynmatTolerances"],[3,"Error"],[3,"RamanJson"],[3,"FrequencyTolerances"],[3,"RamanJsonTolerances"],[3,"MaybeZerolikeTolerances"],[3,"Primitive"],[3,"Dynmat"]]},\
"rsp2_lammps_wrap":{"doc":"","t":[12,12,12,12,12,12,17,17,3,3,3,3,3,3,6,13,3,3,3,6,3,3,4,16,3,3,8,13,4,3,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,10,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","1","1","2","API_TRACE_LEVEL","API_TRACE_TARGET","Arg","AtomType","AtomTypeRange","BoxDynMakeInstance","Builder","DispFn","FailResult","Fatal","INSTANCE_LOCK","InitInfo","InstanceLock","InstanceLockGuard","Lammps","LammpsError","LammpsOnDemand","Meta","PairCoeff","PairStyle","Potential","Recoverable","Severity","UpdateStyle","append_log","arg","arg","args","args","as_fail","atom_types","auto_adjust_lattice","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_disp_fn","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compute_force","compute_force_at_disp","compute_grad","compute_pressure","compute_value","data_trace_dir","debug_dir","default","deref","eco_mode","eq","eq","eq","eq","eq","eq","equilibrium_force","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fast","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_index","from_int","hash","hash","init_info","initialize","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","link_test","masses","molecule_ids","n","name","named","ne","ne","ne","ne","ne","new","new","new","on_demand","openmp_threads","pair_coeffs","pair_style","partial_cmp","partial_cmp","post","potential","pre","processors","safe","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","set_carts","set_lattice","set_structure","stdout","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","subset","sync_positions_every","to_index","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_style","value","None","atom_types","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","from","init_info","into","lift_into","molecule_ids","sculpt","subset","to_owned","try_from","try_into","type_id"],"q":["rsp2_lammps_wrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_lammps_wrap::potential","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Type used for stringy arguments to a Lammps command, …","A Lammps atom type.  These are numbered from 1.","A range of AtomTypes representing the star-wildcard ranges…","","","An alternative to <code>Lammps</code> which is optimized for computing …","","","Guarantees that only one instance of Lammps may exist on …","Data describing the commands which need to be sent to …","Proof that no instance of Lammps currently exists within …","A Lammps is built directly with the MutexGuard wrapper …","","An error thrown by the LAMMPS C API.","","","Represents a <code>pair_coeff</code> command.","Represents a <code>pair_style</code> command.","Trait through which a consumer of this crate sets up the …","","","Configuration for how to tell LAMMPS to update.","","Append an argument","Append an argument","Append several uniformly-typed arguments","Append several uniformly-typed arguments","","Assign atom types to each atom.","Toggles extremely small corrections automatically made to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Call out to the LAMMPS C API to create an instance of …","Create a <code>DispFn</code>, an alternative to <code>Lammps</code> which is …","","","","","","","","","","","","","","","","","","","","","","","","Get the forces, possibly performing some computations if …","","Get the gradient, possibly performing some computations …","Get the pressure tensor, possibly performing some …","Get the potential, possibly performing some computations …","If set, an immensely large number of files will be …","If set, some files may be written to this directory on …","","","Run a continuation in “eco mode,” causing the other …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct from a 0-based index.","","","","Produce information needed by <code>rsp2_lammps_wrap</code> to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize LAMMPS, do nothing of particular value, and …","Mass of each atom type.","Assign molecule ids to each atom.","The N in <code>run N pre PRE post POST</code>","","","","","","","","","Panics","","Enable MPI in Lammps from single-process mode.","Set the number of OpenMP threads per process.","Lammps commands to initialize the pair potentials.","Lammps commands to initialize the pair potentials.","","","","Pre-packaged potentials.","<code>pre yes</code> or <code>pre no</code>. Notice Lammps overrides this on the …","Set the processor grid.","","","","","","","","","","","","","","","","","","","","","Let lammps write directly to the standard output stream.","","","","","","","","","","","","","","","","","Send exact positions at this interval. (<code>0</code> = never)","Recover the 0-based index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents ‘pair_style none’.","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,3,1,2,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,4,0,0,6,1,2,1,2,7,5,6,7,8,9,10,11,12,1,2,13,3,14,7,4,15,6,16,17,8,9,10,11,12,1,2,13,3,14,7,4,15,6,16,17,6,6,7,12,1,2,13,3,14,4,6,16,17,12,1,2,13,3,14,4,6,16,17,14,4,9,11,9,9,9,6,6,6,15,6,1,2,13,3,14,4,11,1,2,13,3,14,4,17,12,1,1,2,2,13,13,3,3,14,14,7,7,4,6,16,17,8,9,10,11,12,1,2,13,13,13,13,3,14,7,4,15,6,16,17,14,4,14,4,5,15,8,9,10,11,12,1,2,13,3,14,7,4,15,6,16,17,8,9,10,11,12,1,2,13,3,14,7,4,15,6,16,17,0,12,5,17,1,1,1,2,13,3,14,2,14,6,6,6,12,12,14,4,17,0,17,6,17,8,9,10,11,12,1,2,13,3,14,7,4,15,6,16,17,9,9,9,6,8,9,10,11,12,1,2,13,3,14,7,4,15,6,16,17,17,14,12,1,2,13,3,14,4,6,16,17,1,2,13,3,14,7,8,9,10,11,12,1,2,13,3,14,7,4,15,6,16,17,8,9,10,11,12,1,2,13,3,14,7,4,15,6,16,17,8,9,10,11,12,1,2,13,3,14,7,4,15,6,16,17,6,14,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["fail",8]],[[["coords",3]],[["vec",3],["atomtype",3]]],[[["bool",15]]],[[],[["backtrace",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["instancelockguard",6],["coords",3]],[["failresult",6],["lammps",3]]],[[["instancelockguard",6],["coords",3]],[["failresult",6],["dispfn",3]]],[[],[["option",4],["fail",8]]],[[],["initinfo",3]],[[],["pairstyle",3]],[[],["paircoeff",3]],[[],["atomtyperange",3]],[[],["arg",3]],[[],["atomtype",3]],[[],["severity",4]],[[],["builder",3]],[[]],[[],["updatestyle",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["atomtype",3]],["ordering",4]],[[["severity",4]],["ordering",4]],[[],[["vec",3],["failresult",6]]],[[],[["vec",3],["failresult",6]]],[[],[["vec",3],["failresult",6]]],[[],["failresult",6]],[[],[["failresult",6],["f64",15]]],[[["option",4]]],[[["option",4]]],[[]],[[],["mutex",3]],[[["fnmut",8]]],[[["pairstyle",3]],["bool",15]],[[["paircoeff",3]],["bool",15]],[[["atomtyperange",3]],["bool",15]],[[["arg",3]],["bool",15]],[[["atomtype",3]],["bool",15]],[[["severity",4]],["bool",15]],[[],[["v3",3],["vec",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u32",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rangefull",3]]],[[["atomtype",3]]],[[["atomtype",3],["range",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["u32",15]],[["severity",4],["failresult",6]]],[[]],[[]],[[["coords",3]],["initinfo",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["failresult",6]],null,[[["coords",3]],[["option",4],["vec",3]]],null,[[],["str",15]],[[]],[[["pairstyle",3]],["bool",15]],[[["paircoeff",3]],["bool",15]],[[["atomtyperange",3]],["bool",15]],[[["arg",3]],["bool",15]],[[["atomtype",3]],["bool",15]],[[]],[[["i64",15]]],[[]],[[["lammpsondemand",4]]],[[["u32",15],["option",4]]],null,null,[[["atomtype",3]],[["option",4],["ordering",4]]],[[["severity",4]],[["option",4],["ordering",4]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["failresult",6]],[[["lattice",3]],["failresult",6]],[[["coords",3]],["failresult",6]],[[["bool",15]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],null,[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["updatestyle",3]]],[[],["i64",15]],null,[[["coords",3]],[["vec",3],["atomtype",3]]],[[]],[[]],[[],["none",3]],[[]],[[],["none",3]],[[["none",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["coords",3]],["initinfo",3]],[[]],[[]],[[["coords",3]],[["option",4],["vec",3]]],[[]],[[],[["result",4],["cnil",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"PairStyle"],[3,"PairCoeff"],[3,"Arg"],[4,"Severity"],[8,"Potential"],[3,"Builder"],[3,"LammpsError"],[3,"InstanceLock"],[3,"Lammps"],[4,"LammpsOnDemand"],[3,"DispFn"],[3,"InitInfo"],[3,"AtomTypeRange"],[3,"AtomType"],[3,"INSTANCE_LOCK"],[3,"BoxDynMakeInstance"],[3,"UpdateStyle"],[3,"None"]]},\
"rsp2_linalg":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,5],"n":["CMatrix","DegenerateMatrixError","as_fail","backtrace","borrow","borrow","borrow_mut","borrow_mut","c_order_data","c_order_data_mut","cause","clone","clone_into","deref","dot","dynmat","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into_inner","lapacke_least_squares_svd","lapacke_linear_solve","left_pseudoinverse","stride","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","diagonalize_real"],"q":["rsp2_linalg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_linalg::dynmat"],"d":["Owned, contiguous, C-order matrix data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Minimizes 2-norm of <code>matrix * x - rhs</code> using LAPACKe’s …","Solves <code>output = square * rhs</code> using LAPACKe’s dgesv.","","","","","","","","","","","Diagonalize a symmetric, real matrix."],"i":[0,0,1,1,1,2,1,2,2,2,1,2,2,2,0,0,1,1,2,1,2,2,2,2,2,2,1,2,2,2,2,0,0,0,2,2,1,1,2,1,2,1,2,0],"f":[null,null,[[],["fail",8]],[[],[["option",4],["backtrace",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["fail",8],["option",4]]],[[],["cmatrix",3]],[[]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["array2",6]]],[[]],[[["arraybase",3]]],[[["arrayview2",6]]],[[["vec",3]]],[[]],[[]],[[]],[[],["array2",6]],[[],["vec",3]],[[],["array2",6]],[[["cmatrix",3]],[["result",4],["array2",6],["error",3]]],[[["cmatrix",3]],[["result",4],["cmatrix",3],["degeneratematrixerror",3]]],[[["cmatrix",3]],[["error",3],["cmatrix",3],["result",4]]],[[],["usize",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[3,"DegenerateMatrixError"],[3,"CMatrix"]]},\
"rsp2_minimize":{"doc":"","t":[0,11,0,0,0,0,0,0,0,4,3,8,3,8,16,3,13,3,16,5,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,10,11,5,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,0,11,11,11,11,11,12,12,11,11,11,11,11,5,5,12,12,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,5,12,11,12,11,12,12,11,11,11,13,13,4,13,13,13,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,3,4,13,3,3,13,6,13,6,3,3,6,6,3,3,6,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,0,6,13,13,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,3,4,4,3,3,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,12,12,11,11,11,11,11,12,11,11,11,12,11,11,11,5,12,11,11,11,11,11,11,11,11,11,12,18,4,13,11,11,11,11,11,11,5,11,11,11,5,11,11,5,11,5,11,5,11,5,11,13,13,4,13,13,4,3,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,4,3,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,12,12,12,12,12,12,12,3,8,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,10,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,13,13,13,4,13,4,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,16,8,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cg","default","exact_ls","fire","hager_ls","numerical","stop_condition","strong_ls","test","AcgsdError","AlgorithmState","BuildAlgorithmStateFn","Builder","DiffFn","Error","Failure","Linesearch","Output","Output","acgsd","alpha","alpha_guess_first","alpha_guess_max","as_fail","backtrace","basic_output_fn","best_position","beta","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","cg_descent","check","clone","clone","clone","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","compute","deserialize","direction","error","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_basic_output_fn","gradient","gradient","hager_beta","into","into","into","into","into","iterations","iterations","linesearch","new_acgsd","new_hager","on_ls_failure","output_fn","output_fn_cosine_formatter","output_fn_dv_formatter","position","position","run","serialize","settings","stop_condition","stop_condition","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","value","Input","borrow","borrow_mut","compute","eta","from","from_gradient","into","last_d_gradient","last_direction","try_from","try_into","type_id","Acgsd","Acgsd","Beta","Fail","Hager","Hager","Linesearch","OnLsFailure","Succeed","Warn","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","ne","ne","new_acgsd","new_hager","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","validate","downhill_min","eta","GradientMax","GradientNorm","GradientRms","Iterations","Simple","StopCondition","ValueDelta","borrow","borrow_mut","clone","clone_box","clone_into","deserialize","eq","fmt","from","into","ne","serialize","to_function","to_owned","try_from","try_into","type_id","delta","steps_ago","0","0","BadBound","Bound","ErrorKind","FunctionOutput","Golden","GoldenSearchError","GsBadValue","Interval","NoMinimum","OneDeeFn","Slope","SlopeBound","SlopeFn","SlopeInterval","Value","ValueBound","ValueFn","alpha","alpha","alpha","as_fail","as_fail","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cause","clone","clone","clone","clone","clone","clone","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","golden","into","into","into","into","into","into","into","into","linesearch","ne","ne","ne","ne","ne","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","run","slope","slope","stop_condition","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","endvals","value","stop_condition","Cereal","IntervalSize","Iterations","Rpn","Simple","borrow","borrow_mut","clone","clone_box","clone_into","deserialize","eq","fmt","from","into","ne","serialize","to_owned","try_from","try_into","type_id","Builder","EulerImplicit","Failure","FireError","Integrator","Output","Params","as_fail","backtrace","basic_output_fn","best_position","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone_box","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","clone_into","damping_init","damping_reduction","deserialize","deserialize","deserialize","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","gradient","integrator","into","into","into","into","into","into","iterations","mass","ne","new","new","output_fn","position","run","serialize","serialize","serialize","slowdown_factor","speedup_factor","speedup_latency","stop_condition","timestep","timestep_max","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","velocity","Settings","armijo_coeff","bisection_point","borrow","borrow_mut","clone","clone_box","clone_into","curvature_coeff","default","deserialize","eq","expansion_growth_factor","fmt","from","into","linesearch","min_reduction","ne","new","partial_cmp","serialize","to_owned","try_from","try_into","type_id","validate","value_epsilon","CentralDifference","DerivativeKind","Stencil","borrow","borrow_mut","clone","clone_box","clone_into","default","diff_2","eq","fmt","from","gradient","into","ne","slope","to_owned","try_diff_2","try_from","try_gradient","try_into","try_slope","type_id","All","Any","Cereal","Const","Logical","LogicalExpression","Rpn","ShouldStop","Simple","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","cmp","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_cereal","into","into","into","ne","ne","ne","partial_cmp","prelude","serialize","serialize","should_stop","should_stop","to_function","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","DiffFn1D","ErrorKind","LinesearchError","Settings","Uphill","armijo_coeff","as_fail","as_fail","backtrace","backtrace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","cause","clone","clone_box","clone_into","curvature_coeff","default","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","iteration_limit","linesearch","ne","new","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","slope","n_dee","one_dee","0","0","0","0","1","1","1","HyperLennardJones","OnceDifferentiable","Product","Recenter","Sum","Trid","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","diff","diff","diff","diff","diff","displace","fmt","fmt","fmt","from","from","from","from","from","gradient","gradient","into","into","into","into","into","min_position","min_radius","min_value","min_value","ndim","ndim","ndim","ndim","ndim","ndim","ndim","recenter","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","value","work","BasePath","Double","Fixed","Linear","PathConfig","Random","RefinementMode","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compute_work_along_path","densities","end","from","from","from","generate","generate_closed","into","into","into","is_closed","start","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_density","domain_max","domain_min","num_points","0","0","0","1","1","1","Derivative","Differentiable1d","Polynomial","Recenter","ScaleX","ScaleY","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_box","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","clone_into","coeffs","derivative","derivative","derivative","derivative","derivative","evaluate","evaluate","evaluate","evaluate","evaluate","fmt","fmt","fmt","fmt","from","from","from","from","from_coeffs","into","into","into","into","prelude","recenter","scale_x","scale_y","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","x","x_n"],"q":["rsp2_minimize","","","","","","","","","rsp2_minimize::cg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::cg::hager_beta","","","","","","","","","","","","","rsp2_minimize::cg::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::cg::settings::Beta","","rsp2_minimize::cg::stop_condition","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::cg::stop_condition::Simple","","rsp2_minimize::exact_ls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::exact_ls::ErrorKind","","rsp2_minimize::exact_ls::golden","rsp2_minimize::exact_ls::golden::stop_condition","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::fire","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::hager_ls","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::numerical","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::stop_condition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::strong_ls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::strong_ls::ErrorKind","rsp2_minimize::test","","rsp2_minimize::test::n_dee","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::test::n_dee::work","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_minimize::test::n_dee::work::PathConfig","","","rsp2_minimize::test::one_dee","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Citations:","Utilities for numeric differentiation.","Exposes a serializable expression language for …","A simple-ish linesearch for a point that satisfies the …","","","","Trait for producing fresh instances of an <code>AlgorithmStateFn</code>…","Provides a significantly greater level of customization …","Represents an objective function with an analytically …","","An error type extended with some additional data.","","","","Perform conjugate gradient using the default …","The initial guess for line step size in the upcoming line …","","","","","Set up a “standard” output function that writes some …","The best position found prior to the failure, for those …","","","","","","","","","","","","Produce a fresh instance of the AlgorithmStateFn, with no …","","Perform conjugate gradient using the default …","This is called at the end of each line search.","","","","","","","","","","Compute the value and gradient at a position.","","Direction traveled last iteration. <code>None</code> on the first …","","","","","","","","","","","","","","","","","","","","","","","","Complete iterations <em>so far.</em>  The first call will be with …","","","Perform conjugate gradient using the default …","Perform conjugate gradient using the default …","","Set up an arbitrary function for logging output each …","Helper for producing a column with the cosines between …","Helper for producing a column with the change in value …","","","","","Please do not manually construct anything in here. None …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>Err(_)</code>.","","","","Behavior when a linesearch along the steepest descent …","Treat a second linesearch failure as a successful stop …","Succeed, but log a warning.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The direction searched will always point at least this …","This… I’m not sure what this does.","Succeed when max absolute value of gradient dips below a …","Succeed when norm of grad for the current structure dips …","Like <code>grad-norm</code>, but rescaled as an intensive property.","Succeed once this many iterations have occurred.","","Configuration for the built-in implementation of stop …","This compares signed values, not magnitudes.","","","","","","","","","","","","","Convert to the more general form accepted by the Builder …","","","","","Relative difference.","","","","","","","","Builder for golden search","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides a significantly greater level of customization …","Semi-implicit Euler integration recommended by …","An error type extended with some additional data.","","","","","","","Set up a “standard” output function that writes some …","The best position found prior to the failure, for those …","","","","","","","","","","","","","","","","","","","","","","","","","","Force damping coefficient (alpha from original FIRE …","Value less than 1 used to decrease alpha.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Uniform mass for all atoms.  Only affects the difference …","","","","Set up an arbitrary function for logging output each …","","","","","","Value less than 1 used when timestep is reduced.","Value less than 1 used when timestep is increased.","Prevent speedup for this many steps before.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Coefficient for the armijo condition. <code>delta</code> in the paper.","Want to bisect somewhere other than 0.5? Be our guest. …","","","","","","Coefficient for the curvature condition. <code>sigma</code> in the …","","","","Interval width growth factor during expansion phase. Not …","","","","","Minimal interval size reduction per complete loop. <code>gamma</code> …","","","","","","","","","","Estimate of relative error in the computed value of the …","Alias for <code>DerivativeKind::Stencil(3)</code>.","Approximation method for a numerical 1D derivative.","n-point stencil. <code>n</code> must be odd. Only implemented for …","","","","","","","Compute a numerical second derivative using finite …","","","","Numerically compute a gradient.","","","Compute a numerical derivative using finite differences.","","<code>diff_2</code> for functions that can fail.","","<code>gradient</code> for functions that can fail.","","<code>slope</code> for functions that can fail.","","Succeed when all subconditions are simultaneously met.","Succeed as soon as any of the subconditions are met.","Type that stop condition config can deserialize directly …","","","Represents logical expressions of T in JSON.","A composite stop condition expressed in reverse-Polish …","Generic trait for stop conditions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert to the more general form accepted by the Builder …","","","","","","","","","","","","","","","<code>linesearch</code> error type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is just a Lennard-Jones potential. In n-dimensional …","NOTE: Default implementations are mutually recursive. You …","computes f(x) g(x)","computes f(center + x)","computes f(x) + g(x)","The function","","","","","","","","","","","","","","","","","","","","","","","","","Translate the potential itself, so that we compute …","","","","","","","","","","","","","","","","","The radius at which value is minimal.","","The minimal value","","","","","","","Number of dimensions","Translate the input, so that we compute <code>f(x + center)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds an extra point if necessary to close the curve.","","","","","","","","","","","","","","","","","","","","","","","","","","","A simple polynomial in one term","Computes <code>f(center + x)</code>","Computes <code>f(scale * x)</code>","Computes <code>scale * f(x)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,4,0,5,6,6,3,3,6,7,6,6,3,7,5,8,6,3,7,5,8,4,3,0,2,6,5,8,6,5,8,6,5,8,2,8,5,7,3,3,7,7,5,8,6,3,3,7,7,5,8,0,5,8,0,6,3,7,5,8,5,8,6,6,6,6,6,0,0,5,8,6,8,0,0,6,6,5,8,3,7,6,3,7,5,8,6,3,7,5,8,6,3,7,5,8,5,8,0,9,9,0,9,9,9,9,9,9,9,9,9,10,11,0,12,10,11,0,0,12,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,10,10,10,11,12,10,11,12,10,11,12,10,11,12,10,11,13,14,15,15,15,15,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,15,17,17,18,19,20,0,0,20,0,0,20,0,20,0,0,0,0,0,0,0,0,21,22,23,24,20,24,20,24,20,18,19,21,22,23,25,24,20,18,19,21,22,23,25,24,20,18,19,21,22,23,25,18,19,21,22,23,25,18,19,21,22,23,25,18,19,21,22,23,24,24,20,20,18,19,21,22,23,25,24,24,20,18,19,21,22,23,25,0,24,20,18,19,21,22,23,25,0,18,19,21,22,23,25,18,19,21,22,23,25,22,23,25,18,19,21,22,23,25,24,20,24,20,18,19,21,22,23,25,24,20,18,19,21,22,23,25,24,20,18,19,21,22,23,25,21,23,26,26,0,0,27,27,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,0,0,0,0,0,29,29,30,31,30,32,28,29,31,33,30,32,28,29,31,33,29,30,32,28,33,30,32,28,33,30,32,28,33,32,32,32,28,33,32,28,31,32,28,29,29,31,31,33,30,32,28,29,31,31,33,33,32,30,32,28,29,31,33,33,32,32,30,32,30,33,30,32,28,33,32,32,32,30,33,32,30,32,28,33,29,31,30,32,28,29,31,33,30,32,28,29,31,33,30,32,28,29,31,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,34,34,34,34,34,34,34,34,34,34,34,35,0,35,35,35,35,35,35,35,0,35,35,35,0,35,35,0,35,0,35,0,35,0,35,36,36,0,37,37,0,0,0,37,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,36,37,36,37,38,36,37,38,36,37,38,38,36,37,38,36,37,38,36,0,36,37,39,38,37,36,37,38,36,37,38,36,37,38,36,37,38,0,0,0,0,40,41,42,40,42,40,41,42,40,41,42,40,42,40,41,41,41,41,41,41,41,42,42,40,40,41,42,42,40,41,42,40,41,0,41,41,41,42,40,41,42,40,41,42,40,41,42,40,41,43,0,0,44,45,46,47,45,46,47,0,0,0,0,0,0,44,48,45,46,47,44,48,45,46,47,45,46,47,45,46,47,45,46,47,49,48,45,46,47,49,45,46,47,44,48,45,46,47,49,44,44,48,45,46,47,44,48,44,48,49,44,48,45,46,47,48,49,45,46,47,44,48,45,46,47,44,48,45,46,47,44,48,45,46,47,49,44,0,0,50,51,50,0,51,0,51,50,52,51,50,52,0,50,52,51,50,52,51,51,51,50,52,52,52,51,50,52,51,50,52,51,50,52,52,53,53,53,54,55,56,54,55,56,57,0,0,0,0,0,54,55,56,58,54,55,56,58,54,55,56,58,54,55,56,58,54,55,56,58,58,57,54,55,56,58,57,54,55,56,58,54,55,56,58,54,55,56,58,58,54,55,56,58,0,57,57,57,54,55,56,58,54,55,56,58,54,55,56,58,54,55,56,58,58,58],"f":[null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["stopcondition",6],["difffn",8]],[["result",4],["failure",3],["output",3]]],null,[[["f64",15]]],[[["f64",15]]],[[],["fail",8]],[[],[["option",4],["backtrace",3]]],[[]],null,[[["beta",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["box",3],["fnmut",8]]],[[],[["fail",8],["option",4]]],[[["stopcondition",6],["difffn",8]],[["result",4],["failure",3],["output",3]]],[[],["result",4]],[[]],[[],["algorithmstate",3]],[[],["output",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["linesearcherror",3]]],[[]],[[["acgsderror",4]]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,[[["linesearch",4]]],[[]],[[]],[[["onlsfailure",4]]],[[]],[[["usize",15],["str",15]]],[[["usize",15],["str",15]]],null,null,[[["difffn",8]],[["result",4],["failure",3],["output",3]]],[[],["result",4]],null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["input",3]],["f64",15]],null,[[]],null,[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["beta",4]],[[],["linesearch",4]],[[],["onlsfailure",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["beta",4]],["bool",15]],[[["linesearch",4]],["bool",15]],[[["onlsfailure",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["beta",4]],["bool",15]],[[["linesearch",4]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["simple",4]],[[]],[[]],[[],["result",4]],[[["simple",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["simple",4]],["bool",15]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["fail",8]],[[],["fail",8]],[[],[["option",4],["backtrace",3]]],[[],[["option",4],["backtrace",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["fail",8],["option",4]]],[[],[["fail",8],["option",4]]],[[],["value",3]],[[],["slope",3]],[[],["valuebound",3]],[[],["slopebound",3]],[[],["bound",3]],[[],["golden",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["value",3]],["bool",15]],[[["slope",3]],["bool",15]],[[["valuebound",3]],["bool",15]],[[["slopebound",3]],["bool",15]],[[["bound",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["errorkind",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]],[["result",4],["result",4],["goldensearcherror",3]]],[[["value",3]],["bool",15]],[[["slope",3]],["bool",15]],[[["valuebound",3]],["bool",15]],[[["slopebound",3]],["bool",15]],[[["bound",3]],["bool",15]],[[]],[[["value",3]],[["option",4],["ordering",4]]],[[["slope",3]],[["option",4],["ordering",4]]],[[["valuebound",3]],[["option",4],["ordering",4]]],[[["slopebound",3]],[["option",4],["ordering",4]]],[[["bound",3]],[["option",4],["ordering",4]]],[[],[["goldensearcherror",3],["result",4],["result",4]]],null,null,[[["cereal",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["simple",4]],[[]],[[]],[[],["result",4]],[[["simple",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["simple",4]],["bool",15]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[],["fail",8]],[[],[["option",4],["backtrace",3]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["fail",8],["option",4]]],[[]],[[],["params",3]],[[],["integrator",4]],[[],["output",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["params",3]],["bool",15]],[[["integrator",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["fireerror",4]]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["params",3]],["bool",15]],[[["params",3]]],[[["f64",15]],["params",3]],[[]],null,[[["difffn",8]],[["failure",3],["result",4],["output",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[]],null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[],["settings",3]],[[]],[[]],null,[[]],[[],["result",4]],[[["settings",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[["f64",15],["settings",3]],[["f64",15],["result",4]]],null,[[["settings",3]],["bool",15]],[[],["settings",3]],[[["settings",3]],[["option",4],["ordering",4]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[],["derivativekind",4]],[[]],[[]],[[],["derivativekind",4]],[[["option",4],["derivativekind",4],["f64",15]],["f64",15]],[[["derivativekind",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["derivativekind",4],["f64",15],["option",4]],[["vec",3],["f64",15]]],[[]],[[["derivativekind",4]],["bool",15]],[[["option",4],["derivativekind",4],["f64",15]],["f64",15]],[[]],[[["option",4],["derivativekind",4],["f64",15]],[["f64",15],["result",4]]],[[],["result",4]],[[["derivativekind",4],["f64",15],["option",4]],[["vec",3],["result",4]]],[[],["result",4]],[[["option",4],["derivativekind",4],["f64",15]],[["f64",15],["result",4]]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["logicalexpression",4]],[[],["cereal",4]],[[],["rpn",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["logicalexpression",4]],["ordering",4]],[[],["result",4]],[[],["result",4]],[[["logicalexpression",4]],["bool",15]],[[["cereal",4]],["bool",15]],[[["rpn",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["cereal",4]]],[[]],[[]],[[]],[[["logicalexpression",4]],["bool",15]],[[["cereal",4]],["bool",15]],[[["rpn",3]],["bool",15]],[[["logicalexpression",4]],[["option",4],["ordering",4]]],null,[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[],["fail",8]],[[],["fail",8]],[[],[["option",4],["backtrace",3]]],[[],[["option",4],["backtrace",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["fail",8],["option",4]]],[[],[["fail",8],["option",4]]],[[],["settings",3]],[[]],[[]],null,[[]],[[["settings",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["errorkind",4]]],[[]],[[]],[[]],[[]],null,[[["f64",15],["settings",3]],[["result",4],["f64",15],["either",4]]],[[["settings",3]],["bool",15]],[[],["settings",3]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sum",3]],[[],["product",3]],[[],["recenter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3],["f64",15]],["recenter",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["f64",15]]],[[],[["vec",3],["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["f64",15]]],null,[[],["f64",15]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["vec",3],["f64",15]],["recenter",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["f64",15]],[[],["f64",15]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["f64",15]],[[]],[[],[["vec",3],["f64",15]]],[[]],[[]],[[]],[[],["basepath",3]],[[],["basepath",3]],[[]],[[]],[[]],[[],["bool",15]],[[],[["vec",3],["f64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],[["vec",3],["vec",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["recenter",3]],[[],["scalex",3]],[[],["scaley",3]],[[],["polynomial",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["polynomial",3]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["polynomial",3]],[[]],[[]],[[]],[[]],null,[[["f64",15]],["recenter",3]],[[["f64",15]],["scalex",3]],[[["f64",15]],["scaley",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["polynomial",3]],[[["u32",15]],["polynomial",3]]],"p":[[6,"Cereal"],[8,"DiffFn"],[4,"AcgsdError"],[8,"BuildAlgorithmStateFn"],[3,"AlgorithmState"],[3,"Builder"],[3,"Failure"],[3,"Output"],[3,"Input"],[4,"Beta"],[4,"Linesearch"],[4,"OnLsFailure"],[13,"Acgsd"],[13,"Hager"],[4,"Simple"],[6,"StopCondition"],[13,"ValueDelta"],[3,"Value"],[3,"Slope"],[4,"ErrorKind"],[3,"ValueBound"],[3,"SlopeBound"],[3,"Bound"],[3,"GoldenSearchError"],[3,"Golden"],[13,"GsBadValue"],[4,"Simple"],[4,"Integrator"],[4,"FireError"],[3,"Builder"],[3,"Failure"],[3,"Params"],[3,"Output"],[3,"Settings"],[4,"DerivativeKind"],[4,"LogicalExpression"],[4,"Cereal"],[3,"Rpn"],[8,"ShouldStop"],[4,"ErrorKind"],[3,"Settings"],[3,"LinesearchError"],[13,"Uphill"],[3,"Trid"],[3,"Sum"],[3,"Product"],[3,"Recenter"],[3,"HyperLennardJones"],[8,"OnceDifferentiable"],[4,"RefinementMode"],[4,"PathConfig"],[3,"BasePath"],[13,"Random"],[3,"Recenter"],[3,"ScaleX"],[3,"ScaleY"],[8,"Differentiable1d"],[3,"Polynomial"]]},\
"rsp2_newtype_indices":{"doc":"","t":[3,8,8,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,10,11,11,14,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CastIt","Idx","IndexCast","IndexVec","Indexed","KeepIt","as_index_type","as_index_type_mut","binary_search","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","extend","fmt","from","from","from","from_elem","from_elem","from_elem_n","from_elem_n","from_iter","from_raw","from_raw","from_raw_mut","from_raw_ref","get","get_mut","hash","index","index","index","index_cast","index_cast","index_cast","index_mut","index_mut","indices","into","into","into","into_index_type","into_iter","into_iter","into_iter_enumerated","iota","is_empty","iter","iter_enumerated","iter_enumerated_mut","iter_mut","last_index","len","ne","new","new","new","newtype_index","next","next","pick2_mut","pop","push","range","raw","resize","shrink_to_fit","to_owned","to_owned","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","with_capacity"],"q":["rsp2_newtype_indices","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Represents some newtyped <code>usize</code> wrapper.","Trait for <code>index_cast</code>. See the free function for details.","","A Vec or slice that uses newtype indices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes a single index type embedded somewhere in a larger …","","","","","Iterate over the indices.","","","","","","","Iterate with indices.","","","","Iterate with indices.","Iterate with indices.","","","","","","","","","","","Return mutable references to two distinct elements, a and …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,2,3,1,1,2,3,1,1,1,1,1,1,1,1,1,1,2,3,1,4,1,4,1,1,4,1,1,1,1,1,1,5,1,1,0,6,6,1,1,1,2,3,1,1,1,1,1,0,1,1,1,1,1,1,1,1,5,4,1,0,5,5,1,1,1,0,1,1,1,1,1,1,2,3,1,2,3,1,2,3,1,4,1],"f":[null,null,null,null,null,null,[[],["indexed",3]],[[],["indexed",3]],[[],["result",4]],[[]],[[]],[[],["indexed",3]],[[]],[[]],[[]],[[]],[[],["indexed",3]],[[],["indexed",3]],[[]],[[]],[[]],[[]],[[["indexed",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["indexed",3]]],[[["indexed",3]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["vec",3]]],[[["vec",3]]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["usize",15]],[[["rangefull",3]],["indexed",3]],[[]],[[]],[[]],[[]],[[["rangefull",3]],["indexed",3]],[[]],[[],[["range",3],["map",3]]],[[]],[[]],[[]],[[],[["vec",3],["indexed",3],["idx",8]]],[[],["intoiter",3]],[[],["intoiter",3]],[[],[["map",3],["enumerate",3]]],[[["idx",8]],[["map",3],["rangefrom",3]]],[[],["bool",15]],[[],["iter",3]],[[],[["map",3],["enumerate",3]]],[[],[["enumerate",3],["map",3]]],[[],["itermut",3]],[[],["option",4]],[[],["usize",15]],[[["indexed",3]],["bool",15]],[[["usize",15]]],[[]],[[]],null,[[]],[[]],[[]],[[],["option",4]],[[]],[[["range",3],["idx",8]],[["map",3],["range",3]]],null,[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[["usize",15]]]],"p":[[3,"Indexed"],[3,"KeepIt"],[3,"CastIt"],[6,"IndexVec"],[8,"Idx"],[8,"IndexCast"]]},\
"rsp2_phonopy_io":{"doc":"","t":[6,0,0,0,0,6,5,5,3,11,11,12,12,11,11,11,5,11,11,11,11,11,5,3,5,5,11,11,12,12,12,11,11,11,12,5,11,11,11,11,11,3,3,5,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,11,11,12,12,12,11,11,12,11,11,11,11,11,11],"n":["FailResult","conf","force_sets","phonopy_disp_yaml","symmetry_yaml","Conf","read","write","ForceSets","borrow","borrow_mut","displacements","force_sets","from","into","lift_into","read","sculpt","subset","try_from","try_into","type_id","write","PhonopyDispYaml","_read","apply_displacement","borrow","borrow_mut","coords","displacements","elements","from","into","lift_into","masses","read","sculpt","subset","try_from","try_into","type_id","Operation","SymmetryYaml","_read","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","from","from","into","into","lift_into","lift_into","point_group_type","read","rotation","sculpt","sculpt","space_group_number","space_group_operations","space_group_type","subset","subset","translation","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rsp2_phonopy_io","","","","","rsp2_phonopy_io::conf","","","rsp2_phonopy_io::force_sets","","","","","","","","","","","","","","","rsp2_phonopy_io::phonopy_disp_yaml","","","","","","","","","","","","","","","","","","rsp2_phonopy_io::symmetry_yaml","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Read a FORCE_SETS file.","","","","","","Write a FORCE_SETS file.","A parsed form of <code>phonopy_disp.yaml</code>","","","","","","","","","","","","","","","","","","Spacegroup operator from <code>disp.yaml</code>.","A parsed –sym output","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,0,0,3,4,3,4,3,4,3,4,3,4,3,4,4,0,3,3,4,4,4,4,3,4,3,3,4,3,4,3,4],"f":[null,null,null,null,null,null,[[],[["failresult",6],["conf",6]]],[[["conf",6]],["failresult",6]],null,[[]],[[]],null,null,[[]],[[]],[[]],[[],[["failresult",6],["forcesets",3]]],[[]],[[],[["result",4],["cnil",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["failresult",6]],null,[[["read",8]],[["failresult",6],["phonopydispyaml",3]]],[[["coords",3]],["coords",3]],[[]],[[]],null,null,null,[[]],[[]],[[]],null,[[],[["failresult",6],["phonopydispyaml",3]]],[[]],[[],[["result",4],["cnil",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["read",8]],[["failresult",6],["symmetryyaml",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],[["failresult",6],["symmetryyaml",3]]],null,[[]],[[]],null,null,null,[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"ForceSets"],[3,"PhonopyDispYaml"],[3,"Operation"],[3,"SymmetryYaml"]]},\
"rsp2_potentials":{"doc":"","t":[5,6,6,0,0,0,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,11,12,12,16,3,3,8,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,3,13,12,12,13,6,3,12,3,17,6,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["FailOk","FailResult","IoResult","crespi","interactions","rebo","A","C","C2N","Output","Params","borrow","borrow","borrow_mut","borrow_mut","clone","clone_box","clone_into","compute","compute_z","compute_z_with_hessian","cutoff_begin","cutoff_end","cutoff_transition_dist","delta","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","grad_ni","grad_nj","grad_rij","init","init","into","into","lambda","lift_into","lift_into","original","ouyang","sculpt","sculpt","subset","subset","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unit","unit_cross","value","value_offset","z0","0","AtomType","Interactions","IsInteracting","Potential","borrow","borrow","borrow_mut","borrow_mut","check_distance","check_distances","clone","clone","clone_box","clone_box","clone_into","clone_into","cmp","compute","compute_bond_deltas","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","fmt","fmt","from","from","hash","init","init","into","into","lift_into","lift_into","max_bonds","ne","num_bonds","num_sites","partial_cmp","sculpt","sculpt","subset","subset","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","nonreactive","AtomType","BondGrad","Carbon","F","G","Hydrogen","Interactions","InteractionsPotential","P","Params","SITE_MAX_BONDS","SiteBondVec","T","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_type","cart_vector","char","check_distance","clone","clone","clone","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","cmp","compute","compute_by_bond","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","equivalent","find_all_interactions","fmt","fmt","fmt","from","from","from","from","from_element","from_function","from_usize","grad","hash","init","init","init","init","into","into","into","into","iter_all","lift_into","lift_into","lift_into","lift_into","max_bonds","minus_site","new_brenner","new_favata","new_lammps","new_lindsay","partial_cmp","plus_site","sculpt","sculpt","sculpt","sculpt","slice","slice_mut","subset","subset","subset","subset","to_owned","to_owned","to_owned","to_usize","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","use_airebo_lambda"],"q":["rsp2_potentials","","","","","","rsp2_potentials::crespi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_potentials::interactions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_potentials::rebo","rsp2_potentials::rebo::nonreactive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","A specialized <code>Result</code> type for I/O operations.","","","","Multiplicative factor for the attractive potential. Units …","Offset constant used in repulsive potential. Units are eV.","Multiplicative constants used in repulsive potential. …","","","","","","","","","","Calculate the Kolmogorov-Crespi potential.","Computes crespi assuming normals are all +Z.","Computes crespi assuming normals are all +Z.","Distance at which the Kolmogorov-Crespi potential starts …","Distance after which the Kolmogorov-Crespi potential is …","How far it takes for the Kolmogorov-Crespi to switch to …","Transverse distance scaling factor. Units are Angstroms.","","","","","","","","","","","","","","","","","Distance scaling factor for the repulsive potential. …","","","Constants used for calculation of the Kolmogorov-Crespi …","Constants used for calculation of the Kolmogorov-Crespi …","","","","","","","","","","","","Differential of the function that produces a unit vector.","Differential of <code>unit(a ⨯ b)</code>.","","Offset added to value for C0 continuity at the cutoff.","“Convenience scaling factor.” Units are Angstroms.","","","Helper used by some potentials to manage the list of …","","The trait a potential needs to implement to use …","","","","","Determine whether a bond of this length should be …","Check that all bond lengths are still reasonable.","","","","","","","","Identify which pairs of atoms are close enough to …","Compute all bond delta vectors, defined as the position …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation of the second-generation REBO potential, …","","","","","","","","","","","The most bonds an atom can have.","A stack-allocated vector of data whose indices correspond …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parameters published in the original REBO paper.","Same as <code>new_lammps</code>, but without Falvo’s fixes.","Parameters consistent with LAMMPS’ <code>Airebo.CH</code>, for …","Parameters optimized for phonon frequencies in Lindsay …","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,0,0,1,2,1,2,2,2,2,1,1,1,1,1,1,1,1,2,1,2,1,2,2,1,2,2,2,2,1,2,1,2,1,1,2,1,1,1,2,1,2,2,1,2,1,2,1,2,0,0,2,1,1,3,4,0,0,0,5,3,5,3,4,5,5,3,5,3,5,3,3,5,5,5,3,5,3,5,3,3,3,5,3,5,3,3,5,3,5,3,5,3,4,3,5,5,3,5,3,5,3,5,3,5,3,5,3,5,3,0,0,0,6,7,7,6,0,0,7,0,0,0,7,8,6,7,9,8,6,7,9,7,8,6,9,6,7,9,6,7,9,6,7,9,6,0,0,8,6,7,9,8,6,7,9,8,6,7,9,6,6,0,6,7,9,8,6,7,9,6,6,6,8,6,8,6,7,9,8,6,7,9,6,8,6,7,9,9,8,7,7,7,7,6,8,8,6,7,9,6,6,8,6,7,9,6,7,9,6,8,6,7,9,8,6,7,9,8,6,7,9,7],"f":[[[],["failresult",6]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["output",3]],[[]],[[]],[[["v3",3]],["output",3]],[[["v3",3]]],[[["v3",3]]],null,[[],["f64",15]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[]],[[]],[[],["params",3]],[[],["params",3]],[[]],[[]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["v3",3]]],[[["v3",3]]],null,[[],["f64",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["f64",15]],[["failresult",6],["isinteracting",3]]],[[["bool",15],["coords",3]],["failresult",6]],[[],["interactions",3]],[[],["isinteracting",3]],[[]],[[]],[[]],[[]],[[["isinteracting",3]],["ordering",4]],[[["periodicgraph",3],["coords",3]],["failresult",6]],[[["bool",15],["coords",3]],[["indexvec",6],["bondi",3],["v3",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["isinteracting",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[["isinteracting",3]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["isinteracting",3]],[["option",4],["ordering",4]]],[[]],[[]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["char",15]],[[["f64",15]],[["failresult",6],["isinteracting",3]]],[[],["atomtype",4]],[[],["params",3]],[[],["interactionspotential",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["atomtype",4]],["ordering",4]],[[["bool",15],["params",3],["interactions",6],["coords",3]],["failresult",6]],[[["bool",15],["params",3],["interactions",6],["coords",3]],["failresult",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["atomtype",4]],["bool",15]],[[],["bool",15]],[[["params",3],["coords",3]],[["failresult",6],["interactions",6]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["element",3]],["failresult",6]],[[["fnmut",8]]],[[["usize",15]]],null,[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],null,[[]],[[]],[[]],[[]],[[["atomtype",4]],[["option",4],["ordering",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[]],[[]],[[]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[3,"Params"],[3,"Output"],[3,"IsInteracting"],[8,"Potential"],[3,"Interactions"],[4,"AtomType"],[3,"Params"],[3,"BondGrad"],[3,"InteractionsPotential"]]},\
"rsp2_python":{"doc":"","t":[3,7,5,11,11,11,11,11,11,11,11],"n":["Guard","ROOT_DIR","add_to_python_path","borrow","borrow_mut","drop","from","into","try_from","try_into","type_id"],"q":["rsp2_python","","","","","","","","","",""],"d":["","","Writes rsp2 python modules to a temporary directory and …","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1],"f":[null,null,[[],[["result",4],["error",3],["guard",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Guard"]]},\
"rsp2_slice_math":{"doc":"Math utils for variable length contiguous vectors.","t":[12,12,8,3,8,16,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5],"n":["0","0","AllowedV","BadNorm","MakeV","Output","V","VMut","VOwn","VRef","add","add","add","add","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","div","div","div","div","div","div","eq","eq","fmt","fmt","from","from","into","into","into_iter","make_v","mul","mul","mul","mul","mul","mul","ne","ne","neg","neg","partial_cmp","partial_cmp","rem","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","v","vdot","vnorm","vnormalize","vsqnorm"],"q":["rsp2_slice_math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","This exists to give you better errors when you …","","Implementation detail of <code>v</code>.","","Implements element-wise operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,0,0,3,0,0,0,0,4,4,4,5,5,5,1,2,1,2,1,2,1,2,4,5,6,6,4,4,4,5,5,5,1,2,1,2,1,2,1,2,4,3,4,4,4,5,5,5,1,2,4,5,1,2,4,4,4,5,5,5,4,4,4,5,5,5,1,2,1,2,1,2,1,2,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,[[["vown",6]],["vown",6]],[[["f64",15]],["vown",6]],[[["vref",6]],["vown",6]],[[["vref",6]],["vown",6]],[[["f64",15]],["vown",6]],[[["vown",6]],["vown",6]],[[]],[[]],[[]],[[]],[[],["badnorm",3]],[[],["v",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vref",6]],["vown",6]],[[["f64",15]],["vown",6]],[[["vown",6]],["vown",6]],[[["f64",15]],["vown",6]],[[["vown",6]],["vown",6]],[[["vref",6]],["vown",6]],[[["badnorm",3]],["bool",15]],[[["v",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vown",6]],["vown",6]],[[["vref",6]],["vown",6]],[[["f64",15]],["vown",6]],[[["vref",6]],["vown",6]],[[["f64",15]],["vown",6]],[[["vown",6]],["vown",6]],[[["badnorm",3]],["bool",15]],[[["v",3]],["bool",15]],[[],["vown",6]],[[],["vown",6]],[[["badnorm",3]],[["option",4],["ordering",4]]],[[["v",3]],[["option",4],["ordering",4]]],[[["f64",15]],["vown",6]],[[["vown",6]],["vown",6]],[[["vref",6]],["vown",6]],[[["vref",6]],["vown",6]],[[["vown",6]],["vown",6]],[[["f64",15]],["vown",6]],[[["f64",15]],["vown",6]],[[["vown",6]],["vown",6]],[[["vref",6]],["vown",6]],[[["f64",15]],["vown",6]],[[["vown",6]],["vown",6]],[[["vref",6]],["vown",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["makev",8]]],[[],["f64",15]],[[],["f64",15]],[[],[["result",4],["badnorm",3],["vown",6]]],[[],["f64",15]]],"p":[[3,"BadNorm"],[3,"V"],[8,"MakeV"],[6,"VOwn"],[6,"VRef"],[6,"VMut"]]},\
"rsp2_soa_ops":{"doc":"","t":[3,3,3,6,8,3,8,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["InvalidPartitionError","InvalidPermutationError","Part","Parted","Partition","Perm","Permute","Unlabeled","append_mut","argsort","argsort_unstable","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eye","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_ord_keys","from_raw_inv","from_raw_inv_unchecked","from_vec","hash","helper","into","into","into","into","into_iter","into_parted_indices","into_partitions","into_partitions","into_raw_inv","into_unlabeled_partitions","into_vec","inverted","key_vec","len","lift_into","lift_into","lift_into","lift_into","ne","new","new_unchecked","of","owned_key_vec","permute_index","permuted_by","permuted_by","permuted_by","pow_signed","pow_unsigned","random","region_indices","region_keys","restoring_perm","sculpt","sculpt","sculpt","sculpt","shift_left","shift_right","shift_signed","subset","subset","subset","subset","then","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_inner","with_outer","composite_perm_for_part_lifo","partition_each_item"],"q":["rsp2_soa_ops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_soa_ops::helper",""],"d":["","An error which indicates that a permutation vector is …","A partition operator.","Type of “a thing that has been partitioned.”","Trait for applying a <code>Part</code> to a <code>Vec</code> (or similar type), …","Represents a reordering operation on an array.","Trait for applying a permutation operation.","Return type of <code>into_unlabeled_partitions</code>.  You hafta use …","Construct a permutation of length <code>a.len() + b.len()</code>.","Compute the <code>Perm</code> that, when applied to the input slice, …","Compute a <code>Perm</code> that, when applied to the input slice, …","","","","","","","","","","","","","","Construct the identity perm of a given length.","","","","","","","","","","","Construct a Part from a sequence of keys, with one …","Construct a perm from the vector internally used to …","No-op constructor.  Still performs checking in debug …","Construct a perm. Useful for literals in unit tests.","","","","","","","","","Consume self to produce partitions.","Consume self to produce partitions.","Obtain the vector that is internally used to represent …","Variant of <code>into_partitions</code> which composes more easily, …","Recover the vector representation of the permutation.","Get the inverse of this permutation.","","Get the length of the permutation.","","","","","","Create a partition that decomposes a vector entirely.","Safety","Conventional group operator, which composes right-to-left.","","Apply the permutation to an index. O(1).","","","","Compute the permutation that applies this permutation <code>exp</code> …","Compute the permutation that applies this permutation <code>exp</code> …","Construct a random permutation of the given length.","Iterate over the index vectors for each region.","Iterate over the keys for each region.","Get the permutation that would restore the original order …","","","","","Compose with the permutation that shifts elements …","Compose with the permutation that shifts elements forward …","Compose with the permutation that shifts elements to the …","","","","","Flipped group operator, which composes left-to-right.","","","","","","","","","","","","","","","","","Construct the outer product of self and <code>faster</code>, with <code>self</code> …","Construct the outer product of self and <code>slower</code>, with <code>self</code> …","Helper function to generate a <code>Perm</code> that is useful for …","Helper function which may be used by some impls of <code>Permute</code>…"],"i":[0,0,0,0,0,0,0,0,1,1,1,2,3,1,4,2,3,1,4,2,1,2,1,1,1,2,3,3,1,4,4,2,3,1,4,2,1,1,1,1,0,2,3,1,4,2,2,5,5,1,5,1,1,2,1,2,3,1,4,1,2,2,1,2,1,6,1,1,1,1,1,2,2,2,2,3,1,4,1,1,1,2,3,1,4,1,2,1,3,4,2,3,1,4,2,3,1,4,2,3,1,4,1,1,0,0],"f":[null,null,null,null,null,null,null,null,[[["perm",3]]],[[],["perm",3]],[[],["perm",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["part",3]],[[],["perm",3]],[[]],[[]],[[["perm",3]],["bool",15]],[[["usize",15]],["perm",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[["global",3],["vec",3],["usize",15]],[["result",4],["perm",3],["invalidpermutationerror",3]]],[[["global",3],["vec",3],["usize",15]],["perm",3]],[[["global",3],["vec",3],["usize",15]],[["result",4],["perm",3],["invalidpermutationerror",3]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[["part",3]],[["parted",6],["clone",8]]],[[["part",3]],[["parted",6],["clone",8]]],[[],[["global",3],["vec",3],["usize",15]]],[[["part",3]],["unlabeled",6]],[[],[["global",3],["vec",3],["usize",15]]],[[],["perm",3]],[[],["vec",3]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["perm",3]],["bool",15]],[[["vec",3],["parted",6]],[["result",4],["invalidpartitionerror",3]]],[[["vec",3],["usize",15],["parted",6]]],[[["perm",3]],["perm",3]],[[],["vec",3]],[[["usize",15]],["usize",15]],[[["perm",3]]],[[["perm",3]],["perm",3]],[[["perm",3]],["perm",3]],[[["i64",15]],["perm",3]],[[["u64",15]],["perm",3]],[[["usize",15]],["perm",3]],[[]],[[]],[[],["perm",3]],[[]],[[]],[[]],[[]],[[["usize",15]],["perm",3]],[[["usize",15]],["perm",3]],[[["isize",15]],["perm",3]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[["perm",3]],["perm",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["perm",3]],["perm",3]],[[["perm",3]],["perm",3]],[[["part",3]],["perm",3]],[[["part",3],["vec",3]],[["vec",3],["unlabeled",6]]]],"p":[[3,"Perm"],[3,"Part"],[3,"InvalidPartitionError"],[3,"InvalidPermutationError"],[8,"Partition"],[8,"Permute"]]},\
"rsp2_sparse":{"doc":"Basic definitions of sparse matrix formats and …","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11],"n":["RawBee","RawCoo","RawCsr","SparseMatrixError","add","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","col","col","dim","dim","dim","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_dense","get","get_mut","into","into","into","into","into_bee","into_bee_with","into_coo","into_coo","into_csr","into_csr","into_csr_with","into_dense","into_dense_with","into_indexed_dense","into_indexed_dense_with","into_raw_transpose","into_raw_transpose","map","map","map","map_column_indices","map_row_indices","nnz","nnz","nnz_with_duplicates","row","row_ptr","row_ranges","to_bee","to_bee_with","to_coo","to_coo","to_csr","to_csr","to_csr_with","to_dense","to_dense_with","to_indexed_dense","to_indexed_dense_with","to_owned","to_owned","to_owned","to_raw_transpose","to_raw_transpose","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","val","val","validate","validate","validate"],"q":["rsp2_sparse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["BTreeMap-based representation.","Coordinate format.","Compressed sparse row.","Returned by <code>validate</code> to indicate that a sparse matrix is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Look up an element, possibly cloning it or returning a …","Look up an element, possibly inserting a zero.","","","","","","","","","","","","","","","","Transpose R and C, disregarding T.  (i.e. if T happens to …","Transpose R and C, disregarding T.  (i.e. if T happens to …","","","","","COO provides the unique capability of mapping indices …","","NOTE: Not O(1), as it must gather up individual counts …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,1,3,4,2,1,3,4,1,3,4,1,3,4,1,3,1,3,4,2,2,1,3,4,2,1,3,4,1,4,4,2,1,3,4,1,1,3,4,1,4,1,1,1,1,1,1,3,1,3,4,1,1,3,4,1,1,3,3,1,1,3,4,1,4,1,1,1,1,1,1,3,4,1,3,2,2,1,3,4,2,1,3,4,2,1,3,4,1,3,1,3,4],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawcoo",3]],[[],["rawcsr",3]],[[],["rawbee",3]],[[]],[[]],[[]],null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["vec",3],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawbee",3]],[[],["rawbee",3]],[[],["rawcoo",3]],[[],["rawcoo",3]],[[],["rawcsr",3]],[[],["rawcsr",3]],[[],["rawcsr",3]],[[],[["vec",3],["vec",3]]],[[],[["vec",3],["vec",3]]],[[],[["vec",3],["indexed",3]]],[[],[["vec",3],["indexed",3]]],[[],["rawcoo",3]],[[],["rawcsr",3]],[[],["rawcoo",3]],[[],["rawcsr",3]],null,[[["usize",15]],[["rawcoo",3],["idx",8]]],[[["usize",15]],[["rawcoo",3],["idx",8]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[],[["indexed",3],["vec",3]]],[[],["rawbee",3]],[[],["rawbee",3]],[[],["rawcoo",3]],[[],["rawcoo",3]],[[],["rawcsr",3]],[[],["rawcsr",3]],[[],["rawcsr",3]],[[],[["vec",3],["vec",3]]],[[],[["vec",3],["vec",3]]],[[],[["vec",3],["indexed",3]]],[[],[["vec",3],["indexed",3]]],[[]],[[]],[[]],[[],["rawcoo",3]],[[],["rawcsr",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],[["result",4],["sparsematrixerror",3]]],[[],[["result",4],["sparsematrixerror",3]]],[[],[["result",4],["sparsematrixerror",3]]]],"p":[[3,"RawCoo"],[3,"SparseMatrixError"],[3,"RawCsr"],[3,"RawBee"]]},\
"rsp2_structure":{"doc":"","tn":["ACTINIUM","ALUMINUM","AMERICIUM","ANTIMONY","ARGON","ARSENIC","ASTATINE","BARIUM","BERKELIUM","BERYLLIUM","BISMUTH","BOHRIUM","BORON","BROMINE","CADMIUM","CAESIUM","CALCIUM","CALIFORNIUM","CARBON","CERIUM","CHLORINE","CHROMIUM","COBALT","COPERNICIUM","COPPER","CURIUM","CartOp","Carts","Coords","CoordsKind","DARMSTADTIUM","DUBNIUM","DYSPROSIUM","EINSTEINIUM","ERBIUM","EUROPIUM","Element","FERMIUM","FLUORINE","FRANCIUM","Fracs","GADOLINIUM","GALLIUM","GERMANIUM","GOLD","HAFNIUM","HASSIUM","HELIUM","HOLMIUM","HYDROGEN","INDIUM","IODINE","IRIDIUM","IRON","IntPrecisionError","IntRot","KRYPTON","LANTHANUM","LAWRENCIUM","LEAD","LITHIUM","LUTETIUM","Lattice","MAGNESIUM","MANGANESE","MEITNERIUM","MENDELEVIUM","MERCURY","MOLYBDENUM","Missing","NEODYMIUM","NEON","NEPTUNIUM","NICKEL","NIOBIUM","NITROGEN","NOBELIUM","NearestImageFinder","NonEquivalentLattice","OSMIUM","OXYGEN","PALLADIUM","PHOSPHORUS","PLATINUM","PLUTONIUM","POLONIUM","POTASSIUM","PRASEODYMIUM","PROMETHIUM","PROTACTINIUM","RADIUM","RADON","RHENIUM","RHODIUM","ROENTGENIUM","RUBIDIUM","RUTHENIUM","RUTHERFORDIUM","SAMARIUM","SCANDIUM","SEABORGIUM","SELENIUM","SILICON","SILVER","SODIUM","STRONTIUM","SULFUR","TANTALUM","TECHNETIUM","TELLURIUM","TERBIUM","THALLIUM","THORIUM","THULIUM","TIN","TITANIUM","TUNGSTEN","URANIUM","VANADIUM","XENON","YTTERBIUM","YTTRIUM","ZINC","ZIRCONIUM","apply_unimodular","as_carts_cached","as_fail","as_fail","as_fracs_cached","as_ref","atomic_number","backtrace","backtrace","bonds","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cart","cart_rot","cart_rot_t","cart_t","cart_trans","carts_mut","cause","cause","check_close","check_same_cell_and_order","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","consts","cubic","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","diagonal","ensure_carts","ensure_fracs","eq","eq","eq","eq","eq","eq","equivalent","equivalent","eye","eye","eye","find_perm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fracs_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from_atomic_number","from_cart","from_molecule","from_str","from_symbol","from_vectors","hash","hash","int_rot","into","into","into","into","into","into","into","into","into","into_carts","into_fracs","into_unlabeled_partitions","into_unlabeled_partitions","inverse_matrix","is_equivalent_to","lattice","layer","len","len","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","lift_into","linear_combination","matrix","matrix","miller","mul","name","ne","ne","ne","ne","ne","new","new","new","new","new","norms","num_atoms","of","of","only_in_a","only_in_b","orthorhombic","partial_cmp","partial_cmp","partial_cmp","perm_to_match","permuted_by","permuted_by","plane_normal","plane_spacing","reciprocal","reduce_positions","rotate_to_lower_triangular","scale_vecs","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","sculpt","serialize","serialize","serialize","serialize","serialize","serialize","set_carts","set_coords","set_difference_indices","set_fracs","set_lattice","shortest_images_cart","shortest_images_cart_fast","sqnorms","subset","subset","subset","subset","subset","subset","subset","subset","subset","supercell","symbol","then","then","then_translate","to_cart_op","to_cart_op_with_frac_trans","to_carts","to_carts","to_fracs","to_fracs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","transform","transform","transform_carts","transform_fracs","transform_fracs","transformed_by","translate_cart","translate_frac","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_equivalent_cell","vectors","volume","with_carts","with_coords","with_fracs","CartBond","CartBonds","CartIter","ComponentLabel","FracBond","FracBonds","FracIter","PeriodicGraph","VeclikeIterator","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cart_vector","cart_vector_using_carts","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compute","compute_with_meta","deserialize","deserialize","eq","eq","eq","eq","eq","equivalent","equivalent","flip","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","hash","hash","image_diff","into","into","into","into","into","into_arbitrary_integer","is_canonical","join","len","len","lift_into","lift_into","lift_into","lift_into","lift_into","ne","ne","ne","ne","ne","num_atoms_per_cell","partial_cmp","partial_cmp","periodic","permuted_by","sculpt","sculpt","sculpt","sculpt","sculpt","serialize","serialize","subset","subset","subset","subset","subset","to","to","to_cart_bonds","to_owned","to_owned","to_owned","to_owned","to_owned","to_periodic_graph","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Edge","Node","PeriodicGraph","borrow","borrow_mut","clone","clone_into","connected_components_by_site","deref","fmt","frac_bonds_from","from","into","lift_into","sculpt","subset","to_owned","try_from","try_into","type_id","ACTINIUM","ALUMINUM","AMERICIUM","ANTIMONY","ARGON","ARSENIC","ASTATINE","BARIUM","BERKELIUM","BERYLLIUM","BISMUTH","BOHRIUM","BORON","BROMINE","CADMIUM","CAESIUM","CALCIUM","CALIFORNIUM","CARBON","CERIUM","CHLORINE","CHROMIUM","COBALT","COPERNICIUM","COPPER","CURIUM","DARMSTADTIUM","DUBNIUM","DYSPROSIUM","EINSTEINIUM","ERBIUM","EUROPIUM","FERMIUM","FLUORINE","FRANCIUM","GADOLINIUM","GALLIUM","GERMANIUM","GOLD","HAFNIUM","HASSIUM","HELIUM","HOLMIUM","HYDROGEN","INDIUM","IODINE","IRIDIUM","IRON","KRYPTON","LANTHANUM","LAWRENCIUM","LEAD","LITHIUM","LUTETIUM","MAGNESIUM","MANGANESE","MEITNERIUM","MENDELEVIUM","MERCURY","MOLYBDENUM","NEODYMIUM","NEON","NEPTUNIUM","NICKEL","NIOBIUM","NITROGEN","NOBELIUM","OSMIUM","OXYGEN","PALLADIUM","PHOSPHORUS","PLATINUM","PLUTONIUM","POLONIUM","POTASSIUM","PRASEODYMIUM","PROMETHIUM","PROTACTINIUM","RADIUM","RADON","RHENIUM","RHODIUM","ROENTGENIUM","RUBIDIUM","RUTHENIUM","RUTHERFORDIUM","SAMARIUM","SCANDIUM","SEABORGIUM","SELENIUM","SILICON","SILVER","SODIUM","STRONTIUM","SULFUR","TANTALUM","TECHNETIUM","TELLURIUM","TERBIUM","THALLIUM","THORIUM","THULIUM","TIN","TITANIUM","TUNGSTEN","URANIUM","VANADIUM","XENON","YTTERBIUM","YTTRIUM","ZINC","ZIRCONIUM","DuplicateMatch","Missing","NoMatch","PositionMatchError","as_fail","backtrace","borrow","borrow","borrow_mut","borrow_mut","cause","clone","clone_into","fmt","fmt","fmt","from","from","into","into","lift_into","lift_into","only_in_a","only_in_b","sculpt","sculpt","spacegroup_coperms","spacegroup_coperms_with_meta","spacegroup_deperms","spacegroup_deperms_with_meta","subset","subset","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Layers","LayersPerUnitCell","NoAtoms","NoDistinctLayers","PerUnitCell","borrow","borrow","borrow_mut","borrow_mut","by_atom","by_atom","clone","clone","clone_into","clone_into","eq","eq","find_layers","find_layers_with_labels","fmt","fmt","from","from","gaps","get_part","groups","into","into","len","lift_into","lift_into","ne","ne","partition_into_contiguous_layers","per_unit_cell","permuted_by","permuted_by","require_simple_axis_normal","scale_gaps","scale_gaps","sculpt","sculpt","subset","subset","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","sorted_indices","gcd","make_primitive","BigDisplacement","Builder","OwnedMetas","SupercellToken","absolute_offset","as_fail","atom_cells","atom_from_cell","atom_from_cell_unchecked","atom_from_lattice_point","atom_lattice_points","atom_primitive_atoms","backtrace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","cause","cell_from_lattice_point","center","center_cell","centered_diagonal","clone","clone","clone_into","clone_into","collapse","collapse_with","deconstruct","diagonal","fmt","fmt","fmt","fmt","from","from","from","into","into","into","lattice_point_from_cell","lattice_point_from_cell_unchecked","lattice_point_translation_deperm","lift_into","lift_into","lift_into","num_cells","num_primitive_atoms","num_supercell_atoms","periods","replicate","replicate_with","sculpt","sculpt","sculpt","subset","subset","subset","to_owned","to_owned","to_string","try_collapse_with","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["rsp2_structurersp2_structure::bonds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_structure::bonds::periodic","","","","","","","","","","","","","","","","","","","","rsp2_structure::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_structure::find_perm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_structure::layer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_structure::layer::Layers","rsp2_structure::miller","","rsp2_structure::supercell","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","A space group operation in cartesian units.","Data that is expressed in a Euclidean basis.","Pairs <code>CoordsKind</code> together with their <code>Lattice</code>.","Wrapper type for coordinates used as input to some APIs.","","","","","","","Represents a specific atomic number.","","","","Data that is expressed in a fractional basis.","","","","","","","","","","","","","","","A point group operation in units of <strong>a particular lattice …","","","","","","","Defines a vector basis for periodic boundary conditions …","","","","","","","The type returned by set difference operations on coords, …","","","","","","","","A helper type for locating nearest images under periodic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Take a linear combination of the lattice vectors to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Recover the cartesian rotation matrix, assuming that the …","","","Get the transpose of the cartesian rotation matrix, …","","Mutably borrow the cartesian coordinates.","","","","An approximate equality check which:","","","","","","","","","","","","","","","","","","A cubic lattice ((a, a, a), (90, 90, 90))","","","","","","","","","","","Ensures that the cartesian coordinates are cached if they …","Ensures that the fractional coordinates are cached if …","","","","","","","","","The identity lattice.","","","","","","","","","","","","","","","","Mutably borrow the fractional coordinates.","","","","","","","","","","","","","","","Obtain an integer representation of a point group …","Create an isolated molecule, using a cubic cell with …","","","","","","Obtain an integer representation of the associated point …","","","","","","","","","","","","","","Get the (precomputed) inverse of the matrix where lattice …","Test if two Lattices represent the same lattice, in the …","","","","Alias for <code>num_atoms</code>.","","","","","","","","","","Take an integer linear combination of the lattice vectors.","Matrix where lattice vectors are rows.","","Utilities for working with Miller indices of planes.","","","","","","","","Create a lattice from a matrix where the rows are lattice …","Create coordinates.","Construct a <code>NearestImageFinder</code> for a lattice.","Construct from a matrix.","","","","Conventional group operator.","Conventional group operator.","","","An orthorhombic lattice ((a, b, c), (90, 90, 90))","","","","Get the permutation that, when applied to this structure, …","","","Get the normal to the family of planes with a given …","Get the interplanar spacing of the family of planes …","Get the reciprocal lattice.","Reduces all fractional coordinates into <code>[0.0, 1.0)</code>.","Rotate into a form where the first vector points entirely …","Individually multiply each lattice vector by a scale …","","","","","","","","","","","","","","","","","Replace the coordinates in the structure.","Get indices of sites that are only in one structure, but …","","","Find the shortest possible vectors between periodic …","A faster version of <code>shortest_image_cart</code> provided that the …","","","","","","","","","","","","","Flipped group operator.","Flipped group operator.","Compose with a translation.","Recover a cartesian operation with zero translation, …","This helper is provided because otherwise all possible …","","","","","","","","","","","","","","","Applies a cartesian transformation matrix.","","","","","Apply a cartesian transformation to the lattice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produce an identical structure (up to precision loss) …","","Get the (positive) volume of the lattice cell.","","Construct a new <code>Coords</code> with the same lattice.  Length …","","","Bonds in a Cartesian format.","","Label of a connected component, suitable for partitioning.","","Bond data in a more widely-reusable form than <code>CartBonds</code>.","","Constructs a finite graph representing bonds per unitcell.","","","","","","","","","","","","","","","","","","","","","","","","","","Compute bonds using a uniform bond length for all types.","Compute bonds, using different bond lengths for different …","","","","","","","","","","Get the bond in the reverse direction.","","","","","","","","","","","","","Source atom of this edge.","","","","","Determines which ghost of <code>to</code> is interacting with which …","","","","","","Get this component label, represented as an integer whose …","A function that returns <code>true</code> for one of the bonds …","If this bond is from <code>A</code> to <code>B</code> and the other bond is from <code>B</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Target atom of this edge.","","","","","","","","Constructs a finite graph representing bonds per unitcell.","","","","","","","","","","","","","","","","","","","Constructs a finite graph representing bonds per unitcell.","","","","","Get keys labelling each site by the connected component …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type returned by set difference operations on coords, …","","","","","","","","","","","","","","","","","","","","","","","","","Compute copermutations for all operators in a spacegroup.","","Compute depermutations for all operators in a spacegroup.","","","","","","","","","","","","Return type of <code>find_layers</code>.","The common case for <code>Layers</code>, indicating at least one …","The structure is empty.","The structure has no distinct layers.  Maybe you could …","Common case.  N layers, with N gaps between them.","","","","","","NOTE: If you modify the public members this may give …","","","","","","","Determine layers in a structure, numbered from zero.","Construct Layers from predetermined site layers …","","","","","","","","","","","","","","","Partition into structures where each layer’s structure …","Maps the common case to Some and the edge cases to None.","","","","","","","","","","","","","","","","","","","Compute the greatest common divisor of a Miller index, as …","Get the “primitive” form of a Miller index, reduced …","","","","Contains enough information to deconstruct a supercell …","","","Defines which image of the primitive cell each atom in …","<strong>Note:</strong> The cell must be in bounds.","","<strong>Note:</strong> The lattice point is wrapped into the supercell.","Gives coefficients of the lattice vectors that were added …","Defines the primitive site corresponding to each …","","","","","","","","","","<strong>Note:</strong> The lattice point is wrapped into the supercell.","","Get the cell index of the centermost cell.","Given dims <code>[a, b, c]</code>, makes a supercell of size …","","","","","The equivalent of <code>deconstruct</code> for site metadata.","The equivalent of <code>deconstruct</code> for site metadata.","Recover a primitive cell by averaging positions from a …","","","","","","","","","","","","<strong>Note:</strong> The cell must be in bounds.","","Get a depermutation representing translation by a …","","","","The number of images taken of the unit cell contained in …","","","","Takes data for each atom of the primitive cell and …","","","","","","","","","","","<code>fold_meta</code> is called on the images of each primitive atom, …","","","","","","","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,1,1,1,1,1,1,0,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,4,5,3,2,1,4,5,0,4,2,6,3,5,7,1,8,9,4,2,6,3,5,7,1,8,9,8,9,9,8,9,3,4,5,6,3,2,6,3,7,1,8,9,2,6,3,7,1,8,9,1,8,0,6,6,8,9,2,6,3,1,8,9,6,3,3,2,6,3,1,8,9,1,8,6,8,9,0,4,4,2,6,3,5,5,7,1,1,8,9,3,4,2,6,6,6,3,5,7,1,8,8,8,9,1,8,3,1,1,6,1,8,9,4,2,6,3,5,7,1,8,9,2,2,2,3,6,6,3,0,2,3,4,2,6,3,5,7,1,8,9,6,6,8,0,8,1,2,3,1,8,9,6,3,7,8,9,6,3,8,9,10,10,6,1,8,9,3,2,3,6,6,6,3,6,3,4,2,6,3,5,7,1,8,9,2,6,3,1,8,9,3,3,3,3,3,7,7,6,4,2,6,3,5,7,1,8,9,0,1,8,9,9,8,8,2,3,2,3,2,6,3,7,1,8,9,4,5,1,3,9,9,8,9,6,3,3,4,2,6,3,5,7,1,8,9,4,2,6,3,5,7,1,8,9,4,2,6,3,5,7,1,8,9,3,6,6,3,3,3,0,0,0,0,0,0,0,0,0,11,12,13,14,15,11,12,13,14,15,14,13,11,12,13,14,15,11,12,13,14,15,13,15,11,11,11,12,11,12,13,14,15,13,15,13,11,12,13,14,15,15,11,11,12,13,14,15,13,14,11,13,15,13,11,12,13,14,15,15,13,13,11,12,11,12,13,14,15,11,12,13,14,15,11,13,15,0,11,11,12,13,14,15,11,12,11,12,13,14,15,13,14,11,11,12,13,14,15,11,15,11,12,13,14,15,11,12,13,14,15,11,12,13,14,15,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,17,0,17,17,17,10,17,10,17,10,10,17,17,10,17,10,17,10,17,10,10,10,17,10,0,0,0,0,17,10,10,17,17,10,17,10,17,10,0,0,18,18,18,18,19,18,19,18,19,18,19,18,19,18,19,0,0,18,19,18,19,19,19,19,18,19,19,18,19,18,19,19,18,18,19,0,18,19,18,19,18,19,18,19,18,19,18,19,18,19,20,0,0,0,0,0,0,21,22,23,23,23,23,23,23,22,21,23,22,21,23,22,21,22,23,21,23,0,21,23,21,23,23,23,23,0,21,23,22,22,21,23,22,21,23,22,23,23,23,21,23,22,23,23,23,23,23,23,21,23,22,21,23,22,21,23,22,23,21,23,22,21,23,22,21,23,22],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["m33",6]]],[[],["option",4]],[[],["fail",8]],[[],["fail",8]],[[],["option",4]],[[],["coordskind",4]],[[],["u32",15]],[[],[["option",4],["backtrace",3]]],[[],[["option",4],["backtrace",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lattice",3]],["m33",6]],[[],["m33",6]],[[],["m33",6]],[[["lattice",3]],["m33",6]],[[],["v3",3]],[[]],[[],[["fail",8],["option",4]]],[[],[["fail",8],["option",4]]],[[["lattice",3],["tolerances",3]],[["result",4],["checkcloseerror",3]]],[[["f64",15],["coords",3]],[["result",4],["error",3]]],[[],["coordskind",4]],[[],["lattice",3]],[[],["coords",3]],[[],["nearestimagefinder",3]],[[],["element",3]],[[],["introt",3]],[[],["cartop",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["element",3]],["ordering",4]],[[["introt",3]],["ordering",4]],null,[[["f64",15]]],[[],["lattice",3]],[[]],[[]],[[],["result",4]],[[["deserializer",8]],["result",4]],[[],["result",4]],[[["deserializer",8]],["result",4]],[[["deserializer",8]],["result",4]],[[["deserializer",8]],["result",4]],[[]],[[]],[[]],[[["coordskind",4]],["bool",15]],[[["lattice",3]],["bool",15]],[[["coords",3]],["bool",15]],[[["element",3]],["bool",15]],[[["introt",3]],["bool",15]],[[["cartop",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["lattice",3],["m33",6]],[["introt",3],["latticesymmetryerror",3],["result",4]]],[[["f64",15]]],[[["str",15]],["result",4]],[[["str",15]],[["result",4],["elementparseerror",3]]],[[]],[[]],[[]],[[["lattice",3]],[["introt",3],["latticesymmetryerror",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lattice",3]],[["vec",3],["v3",3]]],[[["lattice",3]],[["vec",3],["v3",3]]],[[["part",3]],["unlabeled",6]],[[["part",3]],["unlabeled",6]],[[],["m33",6]],[[["lattice",3],["f64",15]],["bool",15]],[[],["lattice",3]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["m33",6]],["lattice",3]],[[],["m33",6]],[[],[["m33",6],["i32",15]]],null,[[["v3",3],["i32",15]]],[[],["str",15]],[[["coordskind",4]],["bool",15]],[[["coords",3]],["bool",15]],[[["element",3]],["bool",15]],[[["introt",3]],["bool",15]],[[["cartop",3]],["bool",15]],[[["m33",6]]],[[["coordskind",4],["lattice",3]]],[[["lattice",3]],[["error",3],["result",4]]],[[["m33",6]],["introt",3]],[[["v3",3],["m33",6]]],[[]],[[],["usize",15]],[[["introt",3]],["introt",3]],[[["cartop",3]],["cartop",3]],null,null,[[["f64",15]]],[[["element",3]],[["option",4],["ordering",4]]],[[["introt",3]],[["option",4],["ordering",4]]],[[["cartop",3]],[["option",4],["ordering",4]]],[[["f64",15],["coords",3]],[["result",4],["perm",3],["positionmatcherror",4]]],[[["perm",3]],["coordskind",4]],[[["perm",3]]],[[["v3",3],["i32",15]],["v3",3]],[[["v3",3],["i32",15]],["f64",15]],[[]],[[]],[[],["lattice",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["serializer",8]],["result",4]],[[],["result",4]],[[["serializer",8]],["result",4]],[[["serializer",8]],["result",4]],[[["serializer",8]],["result",4]],[[["vec",3],["v3",3]]],[[["coordskind",4]]],[[["f64",15],["coords",3]],["missing",3]],[[["vec",3],["v3",3]]],[[["lattice",3]]],[[["vec",3],["f64",15],["v3",3]]],[[["vec",3],["f64",15],["v3",3]]],[[]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],null,[[],["str",15]],[[["introt",3]],["introt",3]],[[["cartop",3]],["cartop",3]],[[["v3",3]]],[[["lattice",3]],["cartop",3]],[[["lattice",3],["v3",3]],["cartop",3]],[[["lattice",3]],[["vec",3],["v3",3]]],[[],[["vec",3],["v3",3]]],[[["lattice",3]],[["vec",3],["v3",3]]],[[],[["vec",3],["v3",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["m33",6]]],[[["coords",3]],["coords",3]],[[],[["vec",3],["v3",3]]],[[],[["vec",3],["v3",3]]],[[["lattice",3]],[["vec",3],["v3",3]]],[[["m33",6]],["lattice",3]],[[["v3",3]]],[[["v3",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["lattice",3],["f64",15]],[["result",4],["nonequivalentlattice",3]]],[[]],[[],["f64",15]],[[["vec",3],["v3",3]]],[[["coordskind",4]]],[[["vec",3],["v3",3]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["lattice",3]],["v3",3]],[[],["fracbonds",3]],[[],["cartbonds",3]],[[],["fracbond",3]],[[],["cartbond",3]],[[],["componentlabel",3]],[[]],[[]],[[]],[[]],[[]],[[["fracbond",3]],["ordering",4]],[[["componentlabel",3]],["ordering",4]],[[["f64",15],["coords",3]],[["error",3],["result",4]]],[[["coords",3]],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[["fracbonds",3]],["bool",15]],[[["cartbonds",3]],["bool",15]],[[["fracbond",3]],["bool",15]],[[["cartbond",3]],["bool",15]],[[["componentlabel",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fracbond",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["periodicgraph",3]],["fracbonds",3]],[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["bool",15]],[[["fracbond",3]],[["option",4],["fracbond",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["fracbonds",3]],["bool",15]],[[["cartbonds",3]],["bool",15]],[[["fracbond",3]],["bool",15]],[[["cartbond",3]],["bool",15]],[[["componentlabel",3]],["bool",15]],[[],["usize",15]],[[["fracbond",3]],[["option",4],["ordering",4]]],[[["componentlabel",3]],[["option",4],["ordering",4]]],null,[[["perm",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],null,null,[[["coords",3]],["cartbonds",3]],[[]],[[]],[[]],[[]],[[]],[[],["periodicgraph",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[],["periodicgraph",3]],[[]],[[],[["vec",3],["componentlabel",3]]],[[]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],[["cnil",4],["result",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["fail",8]],[[],[["option",4],["backtrace",3]]],[[]],[[]],[[]],[[]],[[],[["fail",8],["option",4]]],[[],["missing",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[["f64",15],["coords",3]],[["vec",3],["result",4],["error",3]]],[[["f64",15],["coords",3]],[["vec",3],["result",4],["error",3]]],[[["f64",15],["coords",3]],[["vec",3],["result",4],["error",3]]],[[["f64",15],["coords",3]],[["vec",3],["result",4],["error",3]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],[["vec",3],["usize",15]]],[[],[["vec",3],["usize",15]]],[[],["layers",4]],[[],["layersperunitcell",3]],[[]],[[]],[[["layers",4]],["bool",15]],[[["layersperunitcell",3]],["bool",15]],[[["coords",3],["f64",15],["i32",15],["v3",3]],[["layers",4],["result",4],["error",3]]],[[["coords",3],["f64",15],["i32",15],["v3",3]],[["layers",4],["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[],[["usize",15],["part",3]]],null,[[]],[[]],[[],["usize",15]],[[]],[[]],[[["layers",4]],["bool",15]],[[["layersperunitcell",3]],["bool",15]],[[["coords",3],["v3",3],["i32",15]],[["coords",3],["vec",3]]],[[],[["option",4],["layersperunitcell",3]]],[[["perm",3]]],[[["perm",3]]],[[["lattice",3],["v3",3],["i32",15]],[["result",4],["usize",15],["error",3]]],[[["f64",15]]],[[["f64",15]]],[[]],[[]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["v3",3],["i32",15]],["i32",15]],[[["v3",3],["i32",15]],[["v3",3],["option",4]]],null,null,null,null,[[["v3",3],["i32",15]],["builder",3]],[[],["fail",8]],[[],["vec",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15],["v3",3],["i32",15]],["usize",15]],[[],[["vec",3],["v3",3]]],[[],[["vec",3],["usize",15]]],[[],[["option",4],["backtrace",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["coords",3]]],[[],[["fail",8],["option",4]]],[[["v3",3],["i32",15]]],[[["v3",3],["i32",15]],["builder",3]],[[]],[[],["builder",3]],[[],["builder",3]],[[],["supercelltoken",3]],[[]],[[]],[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[["coords",3],["f64",15]],[["result",4],["coords",3],["bigdisplacement",3]]],[[],["builder",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["v3",3],["i32",15]]],[[],[["v3",3],["i32",15]]],[[["v3",3],["i32",15]],["perm",3]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["vec",3]],[[],["vec",3]],[[]],[[]],[[]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[]],[[]],[[],["string",3]],[[["vec",3]],[["result",4],["vec",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Element"],[4,"CoordsKind"],[3,"Coords"],[3,"IntPrecisionError"],[3,"NonEquivalentLattice"],[3,"Lattice"],[3,"NearestImageFinder"],[3,"IntRot"],[3,"CartOp"],[3,"Missing"],[3,"FracBonds"],[3,"CartBonds"],[3,"FracBond"],[3,"CartBond"],[3,"ComponentLabel"],[3,"PeriodicGraph"],[4,"PositionMatchError"],[4,"Layers"],[3,"LayersPerUnitCell"],[13,"NoDistinctLayers"],[3,"Builder"],[3,"BigDisplacement"],[3,"SupercellToken"]]},\
"rsp2_structure_io":{"doc":"","t":[5,6,3,3,11,0,11,11,11,11,12,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,12,12,12,11,11,11,12,12,12,11,11,12,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FailOk","FailResult","Poscar","Xyz","anim_from_buf_reader","assemble","borrow","borrow","borrow_mut","borrow_mut","carts","clone","clone","clone_into","clone_into","comment","coords","elements","elements","eq","eq","fmt","fmt","from","from","from_buf_reader","from_buf_reader","from_reader","into","into","layers_yaml","lift_into","lift_into","ne","ne","sculpt","sculpt","subset","subset","title","to_owned","to_owned","to_writer","to_writer","try_from","try_from","try_into","try_into","type_id","type_id","v_sim","Assemble","RawAssemble","assemble","atom_layers","borrow","borrow","borrow_mut","borrow_mut","carts_along_normal","check_intralayer_distance","fracs_in_plane","from","from","from_raw","initial_layer_seps","initial_scale","initial_vacuum_sep","into","into","lattice","layer_seps","lift_into","lift_into","normal_axis","normal_axis","num_atoms","num_layer_seps","part","scale","sculpt","sculpt","subset","subset","try_from","try_from","try_into","try_into","type_id","type_id","vacuum_sep","load","load_layer_sc_info","AsciiMetadata","Phonon","VSimAscii","add_phonon","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_labels","clone","clone","clone","clone_into","clone_into","clone_into","comment","coords","default","default","displacements","elements","energy","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","lift_into","lift_into","lift_into","metadata","ne","ne","ne","new","qpoint_frac","sculpt","sculpt","sculpt","set_labels","subset","subset","subset","to_owned","to_owned","to_owned","to_writer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["rsp2_structure_io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_structure_io::assemble","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_structure_io::layers_yaml","","rsp2_structure_io::v_sim","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Read a multiple-frame XYZ file.","","","","","","","","","","","","","","","","","","","","","Reads a POSCAR from an open file.","Read a single-frame XYZ file.","Reads a POSCAR from an open file.","","","","","","","","","","","","","","","Writes a POSCAR to an open file.","Writes an XYZ frame to an open file.","","","","","","","","A partially assembled structure for which some parameters …","","","","","","","","Cartesian coordinates along the normal within each layer. …","Adds a sanity check that each pair of successive atoms …","Fractional coordinates for each layer.  Must all be zero …","","","","Initial separations between layers.","Initial scale factors.  The value on <code>normal_axis</code> is …","Initial separation across periodic boundary.","","","A lattice in which the lattice vector for <code>normal_axis</code> is …","Allows setting layer separations (as center-center …","","","","The axis normal to the layers, as the index of a lattice …","","","The partition that decided the order of the atoms in …","scales each lattice vector.  The value on the normal axis …","","","","","","","","","","","separation across periodic boundary (as the center-center …","","","","","","","","","","","","","","","","","","","","The first line of the file.","","","","Displacement directions in Cartesian.","","Wavenumber (cm^-1).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes a .ascii to an open file.","","","","","","","","",""],"i":[0,0,0,0,1,0,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,2,1,2,1,2,2,1,0,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,0,0,0,3,3,3,4,3,4,4,4,4,3,4,3,4,4,4,3,4,4,3,3,4,3,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,3,0,0,0,0,0,5,6,5,7,6,5,7,5,6,5,7,6,5,7,6,6,5,7,7,6,7,6,5,7,6,5,7,6,5,7,6,5,7,6,5,7,6,6,5,7,5,7,6,5,7,5,6,5,7,6,5,7,6,6,5,7,6,5,7,6,5,7],"f":[[[],[["error",3],["result",4]]],null,null,null,[[],[["failresult",6],["vec",3]]],null,[[]],[[]],[[]],[[]],null,[[],["poscar",3]],[[],["xyz",3]],[[]],[[]],null,null,null,null,[[["poscar",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["failresult",6]],[[],["failresult",6]],[[],["failresult",6]],[[]],[[]],null,[[]],[[]],[[["poscar",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[]],[[]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],null,[[]],[[]],[[],["failresult",6]],[[],["failresult",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["coords",3]],[[],[["vec",3],["usize",15]]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[["rawassemble",3]],["failresult",6]],null,null,null,[[]],[[]],null,[[]],[[]],[[]],[[],["usize",15]],null,[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],[["failresult",6],["assemble",3]]],[[],[["vec",3],["failresult",6]]],null,null,null,[[["phonon",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vsimascii",3]],[[],["asciimetadata",3]],[[],["phonon",3]],[[]],[[]],[[]],null,null,[[],["asciimetadata",3]],[[],["phonon",3]],null,null,null,[[["vsimascii",3]],["bool",15]],[[["asciimetadata",3]],["bool",15]],[[["phonon",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["vsimascii",3]],["bool",15]],[[["asciimetadata",3]],["bool",15]],[[["phonon",3]],["bool",15]],[[]],null,[[]],[[]],[[]],[[]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[],[["cnil",4],["result",4]]],[[]],[[]],[[]],[[],["failresult",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Xyz"],[3,"Poscar"],[3,"Assemble"],[3,"RawAssemble"],[3,"AsciiMetadata"],[3,"VSimAscii"],[3,"Phonon"]]},\
"rsp2_tasks":{"doc":"Implements the entry points for rsp2’s binaries.","t":[5,6,6,3,11,11,11,11,11,12,11,11,11,0,0,11,11,14,11,11,11,0,0,11,11,12,11,11,11,11,11,11,12,3,3,3,5,5,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,5,5,5,5,5,5,11,11,11,5,5,11,11,11,5,11,11,11,11,11,11,11,11,11,12,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,6,18,18,18,18,18,18,3,18,18,18,6,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,6,18,18,18,18,18,18,3,8,8,8,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,6,6,6,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FailOk","FailResult","IoResult","VersionInfo","borrow","borrow_mut","clone","clone_box","clone_into","commit_date","deref","deref_mut","drop","entry_points","exposed_for_testing","fmt","from","impl_dyn_clone_detail","init","into","lift_into","math","meta","sculpt","sendable","short_sha","sift","subset","to_owned","try_from","try_into","type_id","0","AppendLog","AppendLogInner","OptionalFileType","after_diagonalization","bond_test","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compute_for_phonopy","converge_vdw","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","dynmat_analysis","dynmat_at_q","from","from","from","init","init","init","into","into","into","layer_mode_frequencies","lift_into","lift_into","lift_into","make_supercell","or_guess","plot_vdw","print_library_paths","rerun_analysis","rsp2","rsp2_acgsd","rsp2_acgsd_and_dynmat","sculpt","sculpt","sculpt","shear_plot","sparse_analysis","subset","subset","subset","test_rayon","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","DESIGNATED_CELL","ForceConstants","borrow","borrow_mut","clone","clone_box","clone_into","compute_required_rows","deref","deref_mut","drop","dynmat_at_cart_q","fmt","from","impose_translational_invariance","init","into","lift_into","sculpt","sift","subset","to_owned","to_super_force_constants_with_all_rows","to_super_force_constants_with_zeroed_rows","try_from","try_into","type_id","0","0","ACTINIUM","ALUMINUM","AMERICIUM","ANTIMONY","ARGON","ARSENIC","ASTATINE","BARIUM","BERKELIUM","BERYLLIUM","BISMUTH","BOHRIUM","BORON","BROMINE","CADMIUM","CAESIUM","CALCIUM","CALIFORNIUM","CARBON","CERIUM","CHLORINE","CHROMIUM","COBALT","COPERNICIUM","COPPER","CURIUM","CartBonds","DARMSTADTIUM","DUBNIUM","DYSPROSIUM","EINSTEINIUM","ERBIUM","EUROPIUM","Element","FERMIUM","FLUORINE","FRANCIUM","FracBonds","GADOLINIUM","GALLIUM","GERMANIUM","GOLD","HAFNIUM","HASSIUM","HELIUM","HOLMIUM","HYDROGEN","INDIUM","IODINE","IRIDIUM","IRON","KRYPTON","LANTHANUM","LAWRENCIUM","LEAD","LITHIUM","LUTETIUM","Layer","LayerScMatrices","MAGNESIUM","MANGANESE","MEITNERIUM","MENDELEVIUM","MERCURY","MOLYBDENUM","Mass","MetaPick","MetaSendable","MetaSift","NEODYMIUM","NEON","NEPTUNIUM","NICKEL","NIOBIUM","NITROGEN","NOBELIUM","OSMIUM","OXYGEN","PALLADIUM","PHOSPHORUS","PLATINUM","PLUTONIUM","POLONIUM","POTASSIUM","PRASEODYMIUM","PROMETHIUM","PROTACTINIUM","RADIUM","RADON","RHENIUM","RHODIUM","ROENTGENIUM","RUBIDIUM","RUTHENIUM","RUTHERFORDIUM","SAMARIUM","SCANDIUM","SEABORGIUM","SELENIUM","SILICON","SILVER","SODIUM","STRONTIUM","SULFUR","SiteElements","SiteLayers","SiteMasses","TANTALUM","TECHNETIUM","TELLURIUM","TERBIUM","THALLIUM","THORIUM","THULIUM","TIN","TITANIUM","TUNGSTEN","URANIUM","VANADIUM","XENON","YTTERBIUM","YTTRIUM","ZINC","ZIRCONIUM","atomic_number","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","cmp","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_atomic_number","from_str","from_symbol","hash","hash","index","init","init","init","into","into","into","lift_into","lift_into","lift_into","name","ne","ne","ne","new","partial_cmp","partial_cmp","partial_cmp","pick","prelude","sculpt","sculpt","sculpt","sendable","serialize","serialize","serialize","sift","sift","sift","sift","subset","subset","subset","symbol","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["rsp2_tasks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_tasks::entry_points","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_tasks::exposed_for_testing","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_tasks::metad":["","","A specialized <code>Result</code> type for I/O operations.","Version info, provided to rsp2-tasks by the entry points …","","","","","","","","","","","","","","","","","","","Site metadata","","","","","","","","","","","Used by entry points that have no trial directory, but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Displaced atoms must always be in this cell.","Force constants matrix, with only rows for atoms in …","","","","","","Compute a partially filled force constants matrix that …","","","","Compute the dynamical matrix at a q-point.","","","Imposes translational invariance like Phonopy.","","","","","","","","","Convert to a type capable of containing data in arbitrary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a specific atomic number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a single item of a metadata list by type.","Workaround to use metadata where thread safety is …","Get a subset of a metadata list by type, in any order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,2,1,1,1,1,1,1,1,3,0,0,0,0,0,4,3,5,4,3,5,0,0,4,3,5,4,3,5,4,3,5,0,0,4,3,5,4,3,5,4,3,5,0,4,3,5,0,4,0,0,0,0,0,0,4,3,5,0,0,4,3,5,0,4,3,5,4,3,5,4,3,5,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,0,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,9,9,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,8,9,7,7,8,8,9,9,7,8,9,9,9,9,8,9,8,7,8,9,7,8,9,7,8,9,9,7,8,9,8,7,8,9,10,0,7,8,9,11,7,8,9,12,7,8,9,7,8,9,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9],"f":[[[],["failresult",6]],null,null,null,[[]],[[]],[[],["versioninfo",3]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["formatter",3]],["result",6]],[[]],null,[[],["usize",15]],[[]],[[]],null,null,[[]],[[],[["box",3],["fn",8]]],null,[[]],[[],[["result",4],["cnil",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["versioninfo",3],["str",15]]],[[["versioninfo",3],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["versioninfo",3],["str",15]]],[[["versioninfo",3],["str",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["versioninfo",3],["str",15]]],[[["versioninfo",3],["str",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["versioninfo",3],["str",15]]],[[]],[[]],[[]],[[["versioninfo",3],["str",15]]],[[["pathabs",3]],["structurefiletype",4]],[[["versioninfo",3],["str",15]]],[[["versioninfo",3],["str",15]]],[[["versioninfo",3],["str",15]]],[[["versioninfo",3],["str",15]]],[[["versioninfo",3],["str",15]]],[[["versioninfo",3],["str",15]]],[[]],[[]],[[]],[[["versioninfo",3],["str",15]]],[[["versioninfo",3],["str",15]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[["versioninfo",3],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[],["forceconstants",3]],[[]],[[]],[[["supercelltoken",3]],[["result",4],["forceconstants",3],["error",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["coords",3],["supercelltoken",3],["f64",15],["v3",3]],["dynamicalmatrix",3]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["supercelltoken",3],["u32",15]],["forceconstants",3]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["result",4],["cnil",4]]],[[]],[[["supercelltoken",3]],["superforceconstants",3]],[[["supercelltoken",3]],["superforceconstants",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mass",3]],[[],["layer",3]],[[],["element",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["layer",3]],["ordering",4]],[[["element",3]],["ordering",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],[["element",3],["result",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["mass",3]],["bool",15]],[[["layer",3]],["bool",15]],[[["element",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[["u32",15]],[["element",3],["option",4]]],[[["str",15]],[["element",3],["result",4]]],[[["str",15]],[["result",4],["element",3],["elementparseerror",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[["mass",3]],["bool",15]],[[["layer",3]],["bool",15]],[[["element",3]],["bool",15]],[[["usize",15]]],[[["mass",3]],[["option",4],["ordering",4]]],[[["layer",3]],[["option",4],["ordering",4]]],[[["element",3]],[["option",4],["ordering",4]]],[[]],null,[[]],[[]],[[]],[[],[["box",3],["fn",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],[["result",4],["cnil",4]]],[[],["str",15]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"VersionInfo"],[6,"FracBonds"],[3,"AppendLog"],[3,"OptionalFileType"],[3,"AppendLogInner"],[3,"ForceConstants"],[3,"Mass"],[3,"Layer"],[3,"Element"],[8,"MetaPick"],[8,"MetaSendable"],[8,"MetaSift"]]},\
"rsp2_tasks_config":{"doc":"Crate where serde_yaml code for the ‘tasks’ crate is …","t":[12,12,12,12,12,12,12,12,13,3,13,13,3,3,4,4,13,13,3,13,4,4,6,13,3,13,13,13,13,4,3,3,13,18,18,13,8,13,13,13,13,4,4,13,3,13,13,13,13,4,3,4,3,3,3,4,3,3,13,13,13,13,17,3,3,3,13,4,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,4,6,4,4,4,4,3,13,13,3,3,4,3,4,3,13,13,13,13,13,13,13,4,4,3,13,13,3,3,13,13,4,13,13,13,13,4,13,4,13,13,3,3,3,13,8,13,13,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","0","0","0","0","0","0","1","Acgsd","AcousticSearch","Airebo","All","AlwaysFail","Animate","AnimateFormat","AnimateWhich","Axial","Brenner","Cg","Cg","CgFlavor","CgOnLsFailure","CgStopCondition","Dense","DeprecatedLammpsSettings","DftbPlus","Diag","Diag2","Dim","EigenvectorChase","EnergyPlotSettings","EvLoop","Exact","FAIL_MESSAGE","FAIL_MESSAGE","Fail","FailMessage","Fast","Hager","KolmogorovCrespi","KolmogorovCrespiFull","KolmogorovCrespiNormals","KolmogorovCrespiParams","KolmogorovCrespiZ","Lammps","Lammps","Lammps","Lammps","LammpsFavata","LammpsKolmogorovCrespiParams","LammpsPotentialAirebo","LammpsPotentialKind","LammpsPotentialKolmogorovCrespiFull","LammpsPotentialKolmogorovCrespiZ","LammpsPotentialRebo","LammpsUpdateStyle","LatticeRelax","LayerSearch","LayerSeps","Lindsay","LocalFast","LocalTrue","MAX_VERSION","MaskBit","Masses","MessagePhononEigensolverPhonopy","Negative","Never","NotPeriodic","OldKolmogorovCrespiZ","OldLammpsAirebo","OldLammpsKolmogorovCrespiFull","OldLammpsKolmogorovCrespiZ","OldLammpsRebo","OldPotentialKolmogorovCrespiZ","OldReboNew","One","OneByOne","Original","Original","Ouyang","Ouyang","Param","Param","Parameter","Parameters","PhononDispFinder","PhononDispFinderRsp2Directions","PhononEigensolver","PhononSumRule","Phonons","Phonopy","Phonopy","Potential","PotentialDftbPlus","PotentialKind","PotentialKolmogorovCrespi","PotentialReboNewParams","PotentialReboNonreactive","Rayon","Rebo","ReboNonreactive","Rsp2","Rsp2","Run","Safe","Scalable","ScalableRange","ScaleRanges","Search","Serial","Settings","Snapshot","Sparse","Succeed","SupercellSpec","Survey","Target","TestChainify","TestZero","Threading","TranslationalLikePhonopy","UnfoldBands","UniformLayerSep","VSim","ValidatedEnergyPlotSettings","ValidatedPotential","ValidatedSettings","Warn","YamlRead","Z","Zheng","__serde_ignored__from_value","__serde_ignored__from_value","__serde_ignored__from_value","__serde_ignored__from_value","__serde_yaml__from_str","__serde_yaml__from_str","__serde_yaml__from_str","__serde_yaml__from_str","_deprecated_lammps_settings","_deprecated_lammps_settings","acoustic_search","alpha_guess_first","alpha_guess_max","analytic_hessian","animate","as_slice","bond_radius","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cg","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","cutoff","cutoff","cutoff_begin","cutoff_begin","cutoff_interval","cutoff_transition_dist","cutoff_transition_dist","default","default","default","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","disp_finder","displacement_distance","displacement_distance","eigensolver","enable","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ev_chase","ev_loop","every","expected_non_translations","fail","fail","filename","flavor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_dyn_reader","from_dyn_reader","from_reader","from_reader","hash","hash","hash","hsd","imaginary_fdot_threshold","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_vec","lammps","lammps","lammps_processor_axis_mask","lammps_update_style","lattice_relax_22","layer_gamma_threshold","layer_search","lj_enabled","lj_sigma","masses","max_count","max_iter","max_layer_sep","min_positive_iter","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","normal","normals","omp","omp","on_ls_failure","parameters","params","params","params","partial_cmp","partial_cmp","partial_cmp","phonons","potential","potential","processor_axis_mask","rebo","rebo","repeat_count","rotational_fdot_threshold","scalables","scale_ranges","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","skin_check_frequency","skin_check_frequency","skin_depth","skin_depth","snapshot","stop_condition","sum_rule","supercell","symmetry_tolerance","taper","threading","threading","threshold","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","torsion_enabled","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold_bands","update_style","validate","validate","validate","version","version","warn_threshold","which","ls_iteration_limit","taper","n","post","pre","sync_positions_every","sync_positions_every","diag","directions","dense","how_many","how_many","shift_invert_attempts","shift_invert_attempts","level","axis_mask","mask","mask","range","range","range","guess","range","value"],"q":["rsp2_tasks_config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rsp2_tasks_config::CgFlavor","rsp2_tasks_config::LammpsKolmogorovCrespiParams","rsp2_tasks_config::LammpsUpdateStyle","","","","","rsp2_tasks_config::PhononDispFinder","","rsp2_tasks_config::PhononEigensolver","","","","","rsp2_tasks_config::PhononSumRule","rsp2_tasks_config::Scalable","","","","","","rsp2_tasks_config::ScalableRange","",""],"d":["","","","","","","","","","","<code>pair_style airebo</code>","Write all modes.","","Output normal modes each iteration of the ev loop, for …","","","Comparable to phonopy with <code>DIAG = .FALSE.</code>","","","","","Behavior when a linesearch along the steepest descent …","","Diagonalize the dynamical matrix using dense matrix …","","Use arbitrary potentials implemented in DFTB+.","Comparable to phonopy with <code>DIAG = .TRUE.</code>","(Experimental) Diagonal displacements with fractional …","Create a diagonal supercell with <code>n</code> images along the first …","","","Options describing the ev-loop.","","","","Complain loudly and exit with a nonzero exit code.","","(Experimental) Use <code>run 1 pre no post no</code> to notify LAMMPS …","","Reimplementation of LAMMPS’ <code>kolmogorov/crespi/z</code> and/or …","<code>pair_style hybrid rebo kolmogorov/crespi/full</code>","","","<code>pair_style hybrid rebo kolmogorov/crespi/z</code>","","Use potentials implemented in Lammps.  Only a few …","","The rust code will only compute one potential at a time, …","","","","","","","","","","","Optimize each layer separation individually. Can be …","Experimental feature.","Use local normals, as originally implemented in rsp2.","Use local normals, as <em>actually</em> defined in Kolmogorov and …","","","Masses by element.","","Write only those non-acoustic modes with negative …","","","","","","","","","","","","Uses the file <code>CC.KC-full</code> and sets <code>taper = 0</code>.","Parameters lifted from LAMMPS’ <code>CC.KC-full</code>.","Uses the file <code>CH.KC</code> or <code>CH_taper.KC</code>, and sets the <code>taper</code> …","Parameters lifted from LAMMPS’ <code>CH.KC</code>.","","Uniformly scale one or more lattice vectors.","","","","","","","","No longer supported.","Use phonopy to compute the displacements.  This will …","","","","","","","This currently enables parallel code in <code>rebo-new</code> and …","<code>pair_style rebo</code>","REBO, without fractional bond orders.","Deprecated.  Use either ‘sparse’ or ‘dense’.","Use built-in methods to compute the displacements.","(Debug) Use a custom <code>run _ pre _ post _</code> to notify LAMMPS …","Use <code>run 0</code> to notify LAMMPS of updates.","","","","","Everything (or almost everything) should run in serial.","Raw deserialized form of settings.","","Diagonalize the dynamical matrix using ARPACK through …","Treat a second linesearch failure as a successful stop …","Specifies a supercell.","(Debug) Try all three of them and report how many they …","Create a diagonal supercell where the length of the first …","Arranges atoms into a chain along the first lattice …","V = 0","A high-level control of how multiple cores are used.","Imposes the translational sum rule using an …","","Optimize a single value shared by multiple layer …","<code>V_sim</code>’s <code>.ascii</code> text format.","","Potential settings known to satisfy certain properties:","Root settings object.","Succeed, but log a warning.","Provides an alternative to serde_yaml::from_reader where …","Assume all normals are z-oriented.","Use a method based on Zheng, Fawei; Zhang, Ping (2017). …","","","","","","","","","","","See the type for documentation.","Clip initial guesses for linesearch at this value each …","Initial guess for linesearch on the very first iteration.","Use an analytically-computed hessian for the force …","<code>None</code> disables animations.","","<code>None</code> disables bond graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See the type for documentation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Expected number of layers, for a sanity check. (rsp2 will …","Cutoff radius (Angstrom?)","Cutoff radius (Angstrom?)","","Cutoff radius. (Angstrom)","Enable a smooth cutoff starting at …","","Thickness of the “smooth cutoff” shell. (Angstrom)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","How displacements are generated.","How far atoms are displaced when numerically computing …","Displacement to use for checking changes in force along …","","Can be set to <code>false</code> to disable all things related to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See the type for documentation.","See the type for documentation.","Record <code>snapshot.structure</code> every <code>n</code> conjugate gradient …","Known number of non-translational acoustic modes.","Panic on violations of <code>warn_threshold</code>.","Return a nonzero exit code when we reach max-iter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An HSD file embedded as a multiline string.","<code>-1 <= threshold < 1</code>.  How, uh, “pro-parallel” the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See the type for documentation.","","","","Provide relaxation of the top left 2x2 lattice submatrix.","","<code>None</code> disables layer search. (layer_search is also ignored …","","Cutoff radius (x3.4A)","See the type for documentation.","Include no more than this many eigenvectors.  This is a …","Give up after this many iterations.","Separations larger than this are regarded as vacuum and …","Exit after all eigenvalues are positive for this many …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Miller index of the family of planes.  Must have <code>gcd == 1</code>.","","","","","Names of parameters, using the same letter for parameters …","Parameterization.","","“brenner” or “lammps”","","","","See the type for documentation.","Specifies the potential to be used.","","","","","How many times to repeat the process of relaxing all …","<code>-1 <= threshold < 1</code>.  How anti-parallel the changes in …","TODO: Document","Used to optimize lattice parameters prior to relaxation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform a skin check every <code>n</code> computations (<code>0</code> = never) …","","Skin depth for neighbor searches. (Angstrom)","See the type for documentation.","CG stop conditions use a little DSL.","Method of imposing an acoustic sum rule on the force …","Supercell used for force constants.","Cartesian distance threshold for determining if two sites …","","","","The cutoff distance that decides whether two atoms belong …code>None</code> disables band unfolding.","","","","","Identifies the version of the settings that this file …","","Warn if the optimized value of a parameter falls within …","","","","","","","","","Corresponds to phonopy’s DIAG option.","","","How many eigensolutions the sparse eigensolver should …","","The sparse eigensolver first attempts to perform …","","","","Toggle which separations are affected.  For n layers, …","Toggle which separations are affected.  For n layers, …","","","","A “reasonable value” that might be used while another …","",""],"i":[1,2,3,4,5,6,7,7,8,0,9,10,0,0,0,0,11,12,0,13,0,0,0,14,0,15,11,11,16,0,0,0,17,18,18,19,0,20,8,15,9,0,0,9,0,15,12,21,12,0,0,0,0,0,0,0,0,0,22,12,23,23,0,0,0,0,10,0,24,15,15,15,15,15,0,15,24,13,25,26,25,26,24,22,0,0,0,0,0,0,0,14,27,0,0,0,0,0,0,21,9,15,14,27,20,20,0,0,0,17,21,0,0,14,19,0,11,16,15,15,0,28,0,22,29,0,0,0,19,0,23,30,1,31,3,4,1,31,3,4,32,33,32,34,34,35,32,5,32,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,32,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,47,7,53,31,41,42,43,44,41,43,44,36,37,19,8,21,49,50,51,52,20,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,27,11,48,10,29,16,21,49,50,6,51,52,20,7,35,35,49,35,50,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,32,32,51,49,37,50,25,34,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,48,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,54,54,54,54,47,7,53,46,49,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,5,32,33,36,36,32,32,32,39,39,32,48,50,41,50,1,32,36,37,24,22,2,17,34,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,45,46,13,35,28,14,27,48,16,49,50,6,51,52,20,7,31,44,39,40,34,32,42,44,45,47,7,53,32,32,33,52,41,42,37,49,37,32,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,43,44,43,44,32,34,35,35,35,25,32,33,31,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,39,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,1,32,36,37,38,24,22,2,17,30,34,19,8,31,3,33,4,5,15,9,39,40,41,42,25,43,44,23,26,45,12,46,13,35,28,14,47,27,11,48,10,29,16,21,49,50,6,51,52,20,7,53,32,52,32,33,5,32,33,37,48,55,56,57,57,57,58,57,59,60,61,62,61,62,61,63,64,65,66,64,65,66,67,67,68],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["value",4]],[["validatedsettings",3],["result",4],["error",3]]],[[["value",4]],[["result",4],["error",3],["layersearch",3]]],[[["value",4]],[["result",4],["error",3],["validatedenergyplotsettings",3]]],[[["value",4]],[["result",4],["validatedpotential",3],["error",3]]],[[["str",15]],[["validatedsettings",3],["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3],["layersearch",3]]],[[["str",15]],[["result",4],["error",3],["validatedenergyplotsettings",3]]],[[["str",15]],[["result",4],["validatedpotential",3],["error",3]]],null,null,null,null,null,null,null,[[]],nullnull,[[],["validatedsettings",3]],[[],["settings",3]],[[],["deprecatedlammpssettings",3]],[[],["scaleranges",3]],[[],["latticerelax",3]],[[],["parameter",4]],[[],["scalable",4]],[[],["maskbit",3]],[[],["scalablerange",4]],[[],["unfoldbands",4]],[[],["cg",3]],[[],["cgonlsfailure",4]],[[],["cgflavor",4]],[[],["layersearch",3]],[[],["validatedenergyplotsettings",3]],[[],["energyplotsettings",3]],[[],["validatedpotential",3]],[[],["potential",3]],[[],["potentialkind",4]],[[],["lammpspotentialkind",4]],[[],["lammpspotentialairebo",3]],[[],["lammpspotentialrebo",3]],[[],["lammpspotentialkolmogorovcrespiz",3]],[[],["lammpspotentialkolmogorovcrespifull",3]],[[],["lammpskolmogorovcrespiparams",4]],[[],["oldpotentialkolmogorovcrespiz",3]],[[],["potentialkolmogorovcrespi",3]],[[],["kolmogorovcrespinormals",4]],[[],["kolmogorovcrespiparams",4]],[[],["potentialrebononreactive",3]],[[],["potentialrebonewparams",4]],[[],["potentialdftbplus",3]],[[],["eigenvectorchase",4]],[[],["phonons",3]],[[],["phononsumrule",4]],[[],["phononeigensolver",4]],[[],["messagephononeigensolverphonopy",3]],[[],["phonondispfinder",4]],[[],["phonondispfinderrsp2directions",4]],[[],["animate",3]],[[],["animatewhich",4]],[[],["animateformat",4]],[[],["supercellspec",4]],[[],["threading",4]],[[],["acousticsearch",3]],[[],["evloop",3]],[[],["masses",3]],[[],["snapshot",3]],[[],["lammps",3]],[[],["lammpsupdatestyle",4]],[[],["alwaysfail",3]],[[],["nevermessagephononeigensolverphonopy",3]],["ordering",4]],[[["alwaysfail",3]],["ordering",4]],[[["never",4]],["ordering",4]],null,null,null,null,null,null,null,null,[[],["deprecatedlammpssettings",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["deserializer",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["deserializer",8]],["result",4]],[[],["result",4]],[[["deserializer",8]],["result",4]],[[["deserializer",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["deserializer",8]],["result",4]],null,null,null,null,null,[[["validatedsettings",3]],["bool",15]],[[["settings",3]],["bool",15]],[[["deprecatedlammpssettings",3]],["bool",15]],[[["scaleranges",3]],["bool",15]],[[["latticerelax",3]],["bool",15]],[[["parameter",4]],["bool",15]],[[["scalable",4]],["bool",15]],[[["maskbit",3]],["bool",15]],[[["scalablerange",4]],["bool",15]],[[["unfoldbands",4]],["bool",15]],[[["cg",3]],["bool",15]],[[["cgonlsfailure",4]],["bool",15]],[[["cgflavor",4]],["bool",15]],[[["layersearch",3]],["bool",15]],[[["validatedenergyplotsettings",3]],["bool",15]],[[["energyplotsettings",3]],["bool",15]],[[["validatedpotential",3]],["bool",15]],[[["potential",3]],["bool",15]],[[["potentialkind",4]],["bool",15]],[[["lammpspotentialkind",4]],["bool",15]],[[["lammpspotentialairebo",3]],["bool",15]],[[["lammpspotentialrebo",3]],["bool",15]],[[["lammpspotentialkolmogorovcrespiz",3]],["bool",15]],[[["lammpspotentialkolmogorovcrespifull",3]],["bool",15]],[[["lammpskolmogorovcrespiparams",4]],["bool",15]],[[["oldpotentialkolmogorovcrespiz",3]],["bool",15]],[[["potentialkolmogorovcrespi",3]],["bool",15]],[[["kolmogorovcrespinormals",4]],["bool",15]],[[["kolmogorovcrespiparams",4]],["bool",15]],[[["potentialrebononreactive",3]],["bool",15]],[[["potentialrebonewparams",4]],["bool",15]],[[["potentialdftbplus",3]],["bool",15]],[[["eigenvectorchase",4]],["bool",15]],[[["phonons",3]],["bool",15]],[[["phononsumrule",4]],["bool",15]],[[["phononeigensolver",4]],["bool",15]],[[["messagephononeigensolverphonopy",3]],["bool",15]],[[["phonondispfinder",4]],["bool",15]],[[["phonondispfinderrsp2directions",4]],["bool",15]],[[["animate",3]],["bool",15]],[[["animatewhich",4]],["bool",15]],[[["animateformat",4]],["bool",15]],[[["supercellspec",4]],["bool",15]],[[["threading",4]],["bool",15]],[[["acousticsearch",3]],["bool",15]],[[["evloop",3]],["bool",15]],[[["masses",3]],["bool",15]],[[["snapshot",3]],["bool",15]],[[["lammps",3]],["bool",15]],[[["lammpsupdatestyle",4]],["bool",15]],[[["alwaysfail",3]],["bool",15]],[[["never",4]],["bool",15]],null,null,null,null,null,null,[[],["str",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["read",8]],[["error",3],["result",4]]],[[["read",8]],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["potentialkind",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["validatedsettings",3]],["bool",15]],[[["settings",3]],["bool",15]],[[["deprecatedlammpssettings",3]],["bool",15]],[[["scaleranges",3]],["bool",15]],[[["parameter",4]],["bool",15]],[[["scalable",4]],["bool",15]],[[["maskbit",3]],["bool",15]],[[["scalablerange",4]],["bool",15]],[[["cg",3]],["bool",15]],[[["cgflavor",4]],["bool",15]],[[["layersearch",3]],["bool",15]],[[["validatedenergyplotsettings",3]],["bool",15]],[[["energyplotsettings",3]],["bool",15]],[[["validatedpotential",3]],["bool",15]],[[["potential",3]],["bool",15]],[[["potentialkind",4]],["bool",15]],[[["lammpspotentialkind",4]],["bool",15]],[[["lammpspotentialairebo",3]],["bool",15]],[[["lammpspotentialrebo",3]],["bool",15]],[[["lammpspotentialkolmogorovcrespiz",3]],["bool",15]],[[["lammpspotentialkolmogorovcrespifull",3]],["bool",15]],[[["lammpskolmogorovcrespiparams",4]],["bool",15]],[[["oldpotentialkolmogorovcrespiz",3]],["bool",15]],[[["potentialkolmogorovcrespi",3]],["bool",15]],[[["potentialrebononreactive",3]],["bool",15]],[[["potentialdftbplus",3]],["bool",15]],[[["eigenvectorchase",4]],["bool",15]],[[["phonons",3]],["bool",15]],[[["phononsumrule",4]],["bool",15]],[[["phononeigensolver",4]],["bool",15]],[[["phonondispfinder",4]],["bool",15]],[[["animate",3]],["bool",15]],[[["supercellspec",4]],["bool",15]],[[["acousticsearch",3]],["bool",15]],[[["evloop",3]],["bool",15]],[[["masses",3]],["bool",15]],[[["snapshot",3]],["bool",15]],[[["lammps",3]],["bool",15]],[[["lammpsupdatestyle",4]],["bool",15]],[[["alwaysfail",3]],["bool",15]],null,null,null,null,null,null,null,null,null,[[["messagephononeigensolverphonopy",3]],[["option",4],["ordering",4]]],[[["alwaysfail",3]],[["option",4],["ordering",4]]],[[["never",4]],[["option",4],["ordering",4]]],null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],[["validatedsettings",3],["result",4],["error",3]]],[[],[["result",4],["error",3],["validatedenergyplotsettings",3]]],[[],[["result",4],["validatedpotential",3],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"ValidatedSettings"],[3,"MaskBit"],[3,"ValidatedEnergyPlotSettings"],[3,"ValidatedPotential"],[3,"Potential"],[3,"Masses"],[3,"AlwaysFail"],[4,"CgFlavor"],[4,"LammpsPotentialKind"],[4,"AnimateWhich"],[4,"PhononDispFinderRsp2Directions"],[4,"PotentialReboNewParams"],[4,"EigenvectorChase"],[4,"PhononEigensolver"],[4,"PotentialKind"],[4,"SupercellSpec"],[4,"ScalableRange"],[8,"FailMessage"],[4,"CgOnLsFailure"],[4,"LammpsUpdateStyle"],[4,"Threading"],[4,"Scalable"],[4,"KolmogorovCrespiNormals"],[4,"Parameter"],[4,"LammpsKolmogorovCrespiParams"],[4,"KolmogorovCrespiParams"],[4,"PhononDispFinder"],[4,"PhononSumRule"],[4,"AnimateFormat"],[4,"UnfoldBands"],[3,"LayerSearch"],[3,"Settings"],[3,"EnergyPlotSettings"],[3,"Cg"],[3,"Phonons"],[3,"DeprecatedLammpsSettings"],[3,"ScaleRanges"],[3,"LatticeRelax"],[3,"LammpsPotentialAirebo"],[3,"LammpsPotentialRebo"],[3,"LammpsPotentialKolmogorovCrespiZ"],[3,"LammpsPotentialKolmogorovCrespiFull"],[3,"OldPotentialKolmogorovCrespiZ"],[3,"PotentialKolmogorovCrespi"],[3,"PotentialReboNonreactive"],[3,"PotentialDftbPlus"],[3,"MessagePhononEigensolverPhonopy"],[3,"Animate"],[3,"AcousticSearch"],[3,"EvLoop"],[3,"Snapshot"],[3,"Lammps"],[4,"Never"],[8,"YamlRead"],[13,"Acgsd"],[13,"Ouyang"],[13,"Run"],[13,"Fast"],[13,"Phonopy"],[13,"Rsp2"],[13,"Rsp2"],[13,"Sparse"],[13,"TranslationalLikePhonopy"],[13,"Param"],[13,"UniformLayerSep"],[13,"LayerSeps"],[13,"Search"],[13,"Exact"]]},\
"rsp2_util_macros":{"doc":"","t":[14,14,14,14,14,14,14,14,14,14,14,5,14],"n":["_log_once_impl","collect","debug_once","from_json","info_once","matches","named_block","nd","once","trace_once","warn_once","zip_eq","zip_eq"],"q":["rsp2_util_macros","","","","","","","","","","","",""],"d":["","Simpler than the <code>collect!</code> macro from grabbag_macros, and, …","","Does <code>::serde_json::from _value(json!($($arg)*)).unwrap()</code>","","","","Generates the type [[…[T; nN]; …; n1]; n0].","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,[[],["zip",3]],null],"p":[]},\
"rsp2c_unfold":{"doc":"","t":[5],"n":["rsp2c_unfold_all"],"q":["rsp2c_unfold"],"d":[""],"i":[0],"f":[[[["i64",15],["u8",15]],["i32",15]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};