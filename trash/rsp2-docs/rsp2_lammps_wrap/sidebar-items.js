initSidebarItems({"constant":[["API_TRACE_LEVEL",""],["API_TRACE_TARGET",""]],"enum":[["LammpsOnDemand",""],["Severity",""]],"fn":[["link_test","Initialize LAMMPS, do nothing of particular value, and exit."]],"mod":[["potential","Pre-packaged potentials."]],"struct":[["Arg","Type used for stringy arguments to a Lammps command, which takes care of quoting for interior whitespace."],["AtomType","A Lammps atom type.  These are numbered from 1."],["AtomTypeRange","A range of AtomTypes representing the star-wildcard ranges accepted by the `pair_coeff` command."],["BoxDynMakeInstance",""],["Builder",""],["DispFn","An alternative to `Lammps` which is optimized for computing forces at displacements."],["INSTANCE_LOCK","Guarantees that only one instance of Lammps may exist on a process, if constructed through safe APIs."],["InitInfo","Data describing the commands which need to be sent to lammps to initialize atom types and the potential."],["InstanceLock","Proof that no instance of Lammps currently exists within the current process."],["Lammps",""],["LammpsError","An error thrown by the LAMMPS C API."],["PairCoeff","Represents a `pair_coeff` command."],["PairStyle","Represents a `pair_style` command."],["UpdateStyle","Configuration for how to tell LAMMPS to update."]],"trait":[["Potential","Trait through which a consumer of this crate sets up the potential to be used."]],"type":[["FailResult",""],["InstanceLockGuard","A Lammps is built directly with the MutexGuard wrapper (rather than a reference) to dodge an extra lifetime parameter."]]});